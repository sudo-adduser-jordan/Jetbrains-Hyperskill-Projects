type: edu
files:
- name: src/resources/application.properties
  visible: true
  text: |2

    server.port=28852

    #  ***Required For Test***
    server.error.include-message=always

    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.jackson.serialization.INDENT_OUTPUT=true

    # color the console
    spring.output.ansi.enabled=ALWAYS

    #database settings
    spring.h2.console.enabled=true

    #  ***Required For Test***
    spring.datasource.url=jdbc:h2:file:../service_db
    #spring.datasource.url=jdbc:h2:file:C:\\Users\\profile1\\IdeaProjects\\Account Service\\Account Service\\task\\src\\account
    spring.datasource.username=sa
    spring.datasource.password=

    #  ***Required For Test***
    spring.jpa.hibernate.ddl-auto=update
    #spring.jpa.hibernate.ddl-auto=create-drop



    #LOG ERRORS IN CONSOLE
    logging.level.org.springframework.jdbc=DEBUG
    logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
    spring.jpa.show-sql=true




    spring.jackson.serialization.write-single-elem-arrays-unwrapped=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.7.3'
        id 'io.spring.dependency-management' version '1.1.0'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        runtimeOnly 'com.h2database:h2'

        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'
        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
        implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    }
  learner_created: false
- name: src/account/service/UserService.java
  visible: true
  text: |-
    package account.service;

    import account.dto.CustomResponse;
    import account.dto.Password;
    import account.dto.PasswordChangingResponse;
    import account.dto.PaymentsDTO;
    import account.entity.Payments;
    import account.entity.User;
    import account.exception.SamePasswordException;
    import account.exception.UserExistException;
    import account.repository.PaymentsRepository;
    import account.repository.UserRepository;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.lang.Long;
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.*;
    import java.util.logging.Logger;

    import static org.springframework.http.HttpStatus.BAD_REQUEST;

    @Service
    public class UserService {
        private final UserRepository userRepository;
        private final PaymentsRepository paymentsRepository;
        private final PasswordEvaluator passwordEvaluator;
        private final PasswordEncoder passwordEncoder;


        public UserService(PasswordEvaluator passwordEvaluator,
                           PasswordEncoder passwordEncoder,
                           UserRepository userRepository,
                           PaymentsRepository paymentsRepository) {
            this.passwordEvaluator = passwordEvaluator;
            this.passwordEncoder = passwordEncoder;
            this.userRepository = userRepository;
            this.paymentsRepository = paymentsRepository;
        }


        public ResponseEntity<?> signUp(User user) {

            passwordEvaluator.evaluatePassword(user.getPassword());

            if (checkIfEmailExists(user.getEmail())) {
                throw new UserExistException();
            }


            encodePassword(user);
            userRepository.save(user);

            return new ResponseEntity<>(user, HttpStatus.OK);
        }

        public User getUserByEmail(String email) {
            return userRepository.findUserByEmailIgnoreCase(email)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
        }

        private boolean checkIfEmailExists(String email) {

            return userRepository.findUserByEmailIgnoreCase(email).isPresent();
        }

        private boolean checkIfUserAlreadyExists(User user) {
            return userRepository.findUserByEmailIgnoreCase(user.getEmail()).isPresent();
        }

        private void encodePassword(User user) {
            user.setPassword(passwordEncoder.encode(user.getPassword()));
        }

        public List<Payments> getEmployeePayments(User user) {

            User userInDB = userRepository.findUserByEmailIgnoreCase(user.getEmail())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.UNAUTHORIZED));

            List<Payments> list = userInDB.getPaymentsList();
            return list;
        }


        public ResponseEntity<PasswordChangingResponse> changePass(User user, Password password) {

            passwordEvaluator.evaluatePassword(password.getNewPassword());

            User userInDB = getUserByEmail(user.getEmail());

            if (checkTheSamePassword(userInDB, password)) {
                throw new SamePasswordException();
            }

            String encryptedPassword = passwordEncoder.encode(password.getNewPassword());
            userInDB.setPassword(encryptedPassword);
            userRepository.save(userInDB);

            PasswordChangingResponse body = new PasswordChangingResponse(userInDB.getEmail().toLowerCase(),
                    "The password has been updated successfully");
            return new ResponseEntity<>(body, HttpStatus.OK);
        }

        private boolean checkTheSamePassword(User user, Password password) {
            return passwordEncoder.matches(password.getNewPassword(), user.getPassword());
        }

        @Transactional
        public ResponseEntity<?> uploadPayments(List<PaymentsDTO> paymentsDTOList) {

            System.out.println(paymentsDTOList.toString());

            // make sure an employee cannot have 2 payments on the same period

            if (paymentsDTOList.size() > 1) {
                for (int i = 1; i < paymentsDTOList.size(); i++) {
                    PaymentsDTO list = paymentsDTOList.get(i);
                    PaymentsDTO previousList = paymentsDTOList.get(i - 1);
                    String period1 = list.getPeriod();
                    String period2 = previousList.getPeriod();
                    if (period1.equals(period2)) {
                        throw new ResponseStatusException(BAD_REQUEST, "Invalid period");
                    }
                }
            }

            for (PaymentsDTO paymentsDTO : paymentsDTOList) {
                if (isValidPayments(paymentsDTO)) {
                    persistPayments(paymentsDTO);
                }
            }

            CustomResponse body = new CustomResponse();
            body.setStatus("Added successfully!");

            return new ResponseEntity<>(body, HttpStatus.OK);
        }

        public ResponseEntity<?> updatePayments(PaymentsDTO paymentsDTO) {

            try {

                if (isValidPayments(paymentsDTO)) {

                    String formattedPeriod = formatPeriod(paymentsDTO.getPeriod());
                    String formattedSalary = formatSalary(paymentsDTO.getSalary());

                    System.out.println("vbhjlgljhghijlgjkghjkhlghkjlghjkl"+formattedPeriod);
                    System.out.println("vbhjlgljhghijlgjkghjkhlghkjlghjkl"+paymentsDTO.getEmployeeEmail());
                    System.out.println("fkldjsfkljdskljfkldlksa" + formattedSalary);

                    Payments payments = paymentsRepository.findPaymentsOfEmployeeAtPeriod(
                            paymentsDTO.getEmployeeEmail().toLowerCase(), formattedPeriod
                            )
                            .orElseThrow(() -> new ResponseStatusException(BAD_REQUEST, "Payments do not exist"));



                    payments.setSalary(formattedSalary);


                    paymentsRepository.save(payments);

                    CustomResponse body = new CustomResponse();
                    body.setStatus("Updated successfully!");
                    return new ResponseEntity<>(body, HttpStatus.OK);
                }
            } catch (ParseException e) {
                throw new ResponseStatusException(BAD_REQUEST, "Invalid period");
            }
            throw new ResponseStatusException(BAD_REQUEST, "Error in updating the payments");
        }

        private void persistPayments(PaymentsDTO paymentsDTO) {
            try {
                String employeeEmail = paymentsDTO.getEmployeeEmail();

                String formattedPeriod = formatPeriod(paymentsDTO.getPeriod());
                User user = getUserByEmail(paymentsDTO.getEmployeeEmail());

                boolean duplicatedPayments = checkIfPaymentsPeriodExists(employeeEmail, formattedPeriod);
                if (duplicatedPayments) {
                    throw new ResponseStatusException(BAD_REQUEST, "A period cannot repeat for an employee email=" + paymentsDTO.getEmployeeEmail());
                }

                String formattedSalary = formatSalary(paymentsDTO.getSalary());
                Payments payments = new Payments(
                        user.getEmail(),
                        user.getName(),
                        user.getLastName(),
                        formattedPeriod,
                        formattedSalary);

                user.addPayments(payments);
                paymentsRepository.save(payments);
                userRepository.save(user);
            } catch (ParseException e) {
                // the period is validated already before this method
            }


        }

        private String formatSalary(Long salary) {

        StringBuilder dollar = new StringBuilder();
        StringBuilder cent = new StringBuilder();
        String salaryString = String.valueOf(salary);

        for (int i = salaryString.length() - 1; i >= 0; i--) {
            if (cent.length() < 2) {
                cent.append(salaryString.charAt(i));
            } else {
                dollar.append(salaryString.charAt(i));
            }
        }

        if (dollar.length() == 0) {
            dollar = new StringBuilder("0");
        }

        if (cent.length() == 0) {
            cent = new StringBuilder("0");
        }

        return String.format("%s dollar(s) %s cent(s)", dollar.reverse().toString(), cent.reverse().toString());

    }

        private String formatPeriod(String period) throws ParseException {

            SimpleDateFormat firstFormat = new SimpleDateFormat("MM-yyyy");
            firstFormat.setLenient(false);
            Date parsedDate = firstFormat.parse(period);

            //check if it can format "13-2020"
            SimpleDateFormat secondFormat = new SimpleDateFormat("MMMM-yyyy");
            String formattedDate = secondFormat.format(parsedDate);

            return formattedDate;

        }

        private boolean isValidPayments(PaymentsDTO paymentsDTO) {



            try {
                String employeeEmail = paymentsDTO.getEmployeeEmail();
                String formattedPeriod = formatPeriod(paymentsDTO.getPeriod());


                if (paymentsDTO.getSalary() < 0) {
                    throw new ResponseStatusException(BAD_REQUEST, "The salary must be a positive number");
                }

                // check user email exists
                if (!checkIfEmailExists(employeeEmail)) {
                    throw new ResponseStatusException(BAD_REQUEST, "Employee not found for email=" + paymentsDTO.getEmployeeEmail());
                }

            } catch (ParseException e) {
    //            e.printStackTrace();
                throw new ResponseStatusException(BAD_REQUEST, "Invalid period");
            }


            return true;
        }

        private boolean checkIfPaymentsPeriodExists(String employeeEmail, String period) {
            return paymentsRepository.findPaymentsOfEmployeeAtPeriod(employeeEmail, period).isPresent();
        }

        public Payments getEmployeePaymentsAtPeriod(User user, String period) {


            List<Payments> list = user.getPaymentsList();

            try {
                String formattedPeriod = formatPeriod(period);
                return list.stream()
                        .filter(p -> p.getPeriod().equals(formattedPeriod))
                        .findFirst()
                        .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Not found payments at period=" + period));

            } catch (ParseException e) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid period");
            }
        }


    }
  learner_created: false
- name: src/account/repository/UserRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.entity.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends JpaRepository<User, Long> {
        Optional<User> findUserByEmailIgnoreCase(String email);

    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.context.annotation.ComponentScan;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String adminApi = "/api/admin/user/";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");
      private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Hoe")
              .setProps("email", "IvanHoe@acme.com")
              .setProps("password", "nWza98hjkLPE");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String ivanHoeCorrectUser = ivanHoe.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 654321).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 21).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson()
      });
      private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
      private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson()});
      private final String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson();
      private final String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });
      private final String correctPaymentResponseIvanov = convert(new String[]{
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
      });
      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String thirdResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").
                      setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
      });
      private final String fourthResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                      .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }


      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);

        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for check the prohibition of requests specified types
       *
       * @param api testing api (String)
       * @param deniedMethods list of prohibited type requests
       * @param body string representation of body content in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {

        HttpRequest getReq = get(api);
        HttpRequest postReq = post(api, body);
        HttpRequest putReq = put(api, body);
        HttpRequest deleteReq = delete(api);

        Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
          put("get", getReq);
          put("post", postReq);
          put("put", putReq);
          put("delete", deleteReq);
        }};

        for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
          if (deniedMethods.contains(entry.getKey())) {
            HttpResponse response = entry.getValue().send();
            if (response.getStatusCode() != 405) {
              return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                      "405, responded: " + response.getStatusCode());
            }
          }
        }
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);

        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();


        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (responseJson.size() != correctJson.size())  {
          return CheckResult.wrong("Wrong dataa in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }


        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }
            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }


      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Testing user registration negative tests
              () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
              () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
              () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
              () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
              () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
              () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
              () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
              () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
              () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
              () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
              () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                      "Sending password from breached list"), // 11

              // Testing user registration positive tests
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15

    //          // Testing user registration negative tests
              () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
              () -> testUserDuplicates(jDCorrectUser), // 17
              () -> testApi(null, jDLower, 400, signUpApi, "POST",
                      "User must be unique (ignorecase)!"), // 18

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 24
    //
    //          // Testing changing password
              () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                      "This api only for authenticated user"), // 25
              () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                      "The password length must be at least 12 chars!"), // 26
              () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                      "The passwords must be different!"), // 27
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"), // 28
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                      "Password must be changed!"), // 30
              () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                      "Password must be changed!"), // 31

              // Testing persistence
              () -> restartApplication(), // 32
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 33

              // Testing admin functions
              // Delete user
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                      "Api must be available only to admin user"), // 34
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                      "Api must be available only to admin user"), // 35
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"), // 36
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 38
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                      jDNewPass, "johndoe@acme.com",
                      "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                      jDNewPass, "johndoe@goole.com",
                      "User not found!", "Trying to delete non existing user"), // 40
              () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
              () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44

              // Testing persistence
              () -> restartApplication(), // 45
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 46



              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      thirdResponseAdminApi, "Role must be changed!"), // 48
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, ""),
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "Role must be changed!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),

              // Testing admin functions, negative tests
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                      new String[] {"Role not found!"}, "Trying add not existing role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "USER", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add business role to administrator!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "ADMINISTRATOR", "REMOVE",
                      new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "USER", "REMOVE",
                      new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"User not found!"}, "Trying remove role from non existing user!"),

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"),
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),

              // Testing business logic
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"),
      };

    }
  learner_created: false
- name: src/account/service/AuthService.java
  visible: true
  text: |
    package account.service;

    import account.dto.user.CreateUserDto;
    import account.dto.user.GetUserDto;
    import account.mapper.Mapper;
    import account.model.user.User;
    import account.repository.UserRepository;
    import account.util.ResponseStatus;
    import account.validator.Validators;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import javax.transaction.Transactional;
    import java.util.Set;

    @AllArgsConstructor
    @Service
    @Slf4j
    public class AuthService {

        private final UserRepository userRepository;
        private final PasswordEncoder passwordEncoder;
        private final Mapper mapper;

        public GetUserDto register(CreateUserDto createUserDto) {
            log.info("Registering \"" + createUserDto + "\"");
            createUserDto.setEmail(createUserDto.getEmail().toLowerCase());
            Validators.validatePasswordBreached(createUserDto.getPassword());
            Validators.validateUserExist(createUserDto.getEmail(), userRepository);
            createUserDto.setPassword(passwordEncoder.encode(createUserDto.getPassword()));
            User user = mapper.createUserDtoToUser(createUserDto);
            return mapper.userToGetUserDto(userRepository.save(user));
        }

        @Transactional
        public ResponseEntity<?> changePassword(User user, String password) {
            log.info("Changing password \"" + user.getUsername() + "\"");
            Validators.validatePasswordBreached(password);
            Validators.validatePasswordSame(password, user, passwordEncoder);
            userRepository.updatePassword(passwordEncoder.encode(password), user.getUsername());
            return ResponseStatus.builder()
                    .add("email", user.getUsername())
                    .add("status", "The password has been updated successfully")
                    .build();
        }
    }
  learner_created: true
- name: src/account/config/RestAuthEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/config/EntityExceptionHandler.java
  visible: true
  text: |+
    package account.config;

    import account.util.ResponseStatus;
    import org.springframework.context.support.DefaultMessageSourceResolvable;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.util.Date;
    import java.util.stream.Collectors;

    @ControllerAdvice
    public class EntityExceptionHandler extends ResponseEntityExceptionHandler {

        @Override
        @ResponseBody
        protected ResponseEntity<Object> handleMethodArgumentNotValid(
                MethodArgumentNotValidException exception,
                HttpHeaders headers,
                HttpStatus status,
                WebRequest request) {
            String message = exception.getBindingResult().getAllErrors().stream()
                    .map(DefaultMessageSourceResolvable::getDefaultMessage)
                    .collect(Collectors.joining(", "));
            return ResponseStatus.builder()
                    .add("timestamp", new Date().toString())
                    .add("status", status.value())
                    .add("error", status.getReasonPhrase())
                    .add("message", message)
                    .add("path", request.getDescription(false).substring(4))
                    .status(HttpStatus.BAD_REQUEST)
                    .build();
        }

    }

  learner_created: true
- name: src/account/util/ValidList.java
  visible: true
  text: |
    package account.util;

    import lombok.Data;
    import lombok.experimental.Delegate;

    import javax.validation.Valid;
    import java.util.ArrayList;
    import java.util.List;

    @Data
    public class ValidList<E> implements List<E> {

        @Valid
        @Delegate
        private List<E> list = new ArrayList<>();
    }
  learner_created: true
- name: src/account/config/SecurityConfigurer.java
  visible: true
  text: |
    package account.config;


    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.SecurityFilterChain;


    @Configuration
    @EnableWebSecurity
    public class SecurityConfigurer {


        private final RestAuthEntryPoint restAuthenticationEntryPoint;
        private final BCryptConfigurer bCryptConfigurer;

        public SecurityConfigurer(RestAuthEntryPoint restAuthenticationEntryPoint,
                                  BCryptConfigurer bCryptConfigurer) {
            this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
            this.bCryptConfigurer = bCryptConfigurer;
        }

        @Bean
        public SecurityFilterChain configure(HttpSecurity http) throws Exception {
            return http
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .and()

                    .csrf(csrf -> {
                        csrf.disable();
                        csrf.ignoringAntMatchers("/h2-console/**");
                    })
                    .headers(headers -> headers.frameOptions().disable())

                    .authorizeRequests(auth -> {
                        auth.antMatchers("/h2-console/**").permitAll();
    //                    auth.antMatchers(HttpMethod.GET, "/api/empl/payment").permitAll();
                        auth.antMatchers(HttpMethod.PUT, "/api/acct/payments").permitAll();
                        auth.antMatchers(HttpMethod.POST, "/api/acct/payments").permitAll();
                        auth.antMatchers(HttpMethod.POST,"/api/auth/signup", "/actuator/shutdown").permitAll();
                        auth.anyRequest().authenticated();
                    })

                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                    .and()

                    .build();
        }


    }
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.dto.user.UpdatePasswordUserDto;
    import account.dto.user.CreateUserDto;
    import account.dto.user.GetUserDto;
    import account.model.user.User;
    import account.service.AuthService;
    import javax.validation.Valid;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.annotation.Secured;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    @AllArgsConstructor
    @RestController
    @RequestMapping("api/auth")
    public class AuthController {

        private final AuthService authService;

        @PostMapping("signup")
        public GetUserDto register(@RequestBody @Valid CreateUserDto createUserDto) {
            return authService.register(createUserDto);
        }

        @PostMapping("changepass")
        public ResponseEntity<?> changePassword(@RequestBody @Valid UpdatePasswordUserDto updatePasswordUserDto,
                                                @AuthenticationPrincipal User user) {
            return authService.changePassword(user, updatePasswordUserDto.getNewPassword());
        }

    }
  learner_created: true
- name: src/account/exception/ValidException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    public class ValidException extends ResponseStatusException {
        public ValidException(String reason) {
            super(HttpStatus.BAD_REQUEST, reason);
        }
    }
  learner_created: true
- name: src/account/validator/Validators.java
  visible: true
  text: |
    package account.validator;

    import account.dto.payment.PostPaymentDto;
    import account.exception.ValidException;
    import account.model.Payment;
    import account.model.user.User;
    import account.repository.UserRepository;
    import org.springframework.security.crypto.password.PasswordEncoder;

    import java.util.List;
    import java.util.Set;

    public class Validators {

        private static final Set<String> breachedPasswords = Set.of(
                "PasswordForJanuary",
                "PasswordForFebruary",
                "PasswordForMarch",
                "PasswordForApril",
                "PasswordForMay",
                "PasswordForJune",
                "PasswordForJuly",
                "PasswordForAugust",
                "PasswordForSeptember",
                "PasswordForOctober",
                "PasswordForNovember",
                "PasswordForDecember"
        );

        public static void validatePeriod(String period) {
            if (period == null) {
                throw new ValidException("Period cannot be null");
            }
            if (!period.matches("(0?[1-9]|1[0-2])-\\d+")) {
                throw new ValidException("Period invalid format");
            }
        }

        public static void validatePasswordBreached(String password) {
            if (breachedPasswords.contains(password)) {
                throw new ValidException("The password is in the hacker's database!");
            }
        }

        public static void validatePasswordSame(String password, User user, PasswordEncoder passwordEncoder) {
            if (passwordEncoder.matches(password, user.getPassword())) {
                throw new ValidException("The passwords must be different!");
            }
        }

        public static void validatePaymentPeriodExist(List<Payment> payments, Payment payment) {
            boolean periodNotExist = payments.stream()
                    .map(Payment::getPeriod)
                    .noneMatch(d -> d.equals(payment.getPeriod()));
            if (periodNotExist) {
                throw new ValidException("Provided period data does not exist");
            }
        }

        public static void validateIsOneUser(List<PostPaymentDto> payments) {
            long users = payments.stream()
                    .map(PostPaymentDto::getEmployee)
                    .map(String::toLowerCase)
                    .distinct()
                    .count();
            if (users == 1) {
                throw new ValidException("Should be only one employee");
            }
        }

        /**
         * @param payments must implement equals and hashcode by username and period
         */
        public static void validateDistinctPeriodUserPairs(List<Payment> payments) {
            long distinctCount = payments.stream().distinct().count();
            if (distinctCount != payments.size()) {
                throw new ValidException("Employee-period pair must be unique");
            }
        }

        public static void validateUserExist(String username, UserRepository repository) {
            if (repository.findByUsername(username).isPresent()) {
                throw new ValidException("User exist!");
            }
        }


    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.Payment;
    import account.model.user.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Modifying;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.query.Param;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDate;
    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface PaymentRepository extends JpaRepository<Payment, Long> {

        List<Payment> findPaymentsByUser(User user);

        Optional<Payment> findPaymentByUserAndPeriod(User user, LocalDate period);

        @Modifying
        @Query("UPDATE Payment p SET p.salary = :salary WHERE p.period = :period AND p.user = :user")
        void updatePaymentByUserAndPeriod(@Param("user") User user,
                           @Param("period") LocalDate period,
                           @Param("salary") Long salary);
    }
  learner_created: true
- name: src/account/config/BCryptConfigurer.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

    @Configuration
    public class BCryptConfigurer {

        @Bean
        public BCryptPasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }

    }
  learner_created: true
- name: src/account/dto/payment/PostPaymentDto.java
  visible: true
  text: |
    package account.dto.payment;

    import javax.validation.constraints.*;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class PostPaymentDto {

        @NotNull(message = "Employee cannot be null")
        @NotBlank(message = "Employee cannot be blank")
        @Email(message = "Employee invalid format")
        @Pattern(regexp = ".+@acme.com", message = "Employee invalid format")
        private String employee;

        @NotNull(message = "Period cannot be null")
        @Pattern(regexp = "(0?[1-9]|1[0-2])-\\d+", message = "Period invalid format")
        private String period;

        @NotNull(message = "Salary cannot be null")
        @PositiveOrZero(message = "Salary cannot be negative")
        private Long salary;

    }
  learner_created: true
- name: src/account/controller/BusinessController.java
  visible: true
  text: |
    package account.controller;

    import account.dto.payment.PostPaymentDto;
    import account.model.user.User;
    import account.service.BusinessService;
    import account.util.ValidList;
    import account.validator.Validators;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.Optional;

    @RestController
    @AllArgsConstructor
    @RequestMapping("api")
    public class BusinessController {

        private final BusinessService businessService;

        @GetMapping("empl/payment")
        public ResponseEntity<?> getPayment(@RequestParam Optional<String> period,
                                            @AuthenticationPrincipal User user) {
            if (period.isPresent()) {
                Validators.validatePeriod(period.get());
                return ResponseEntity.ok(businessService.getUserPaymentByPeriod(user, period.get()));
            }
            return ResponseEntity.ok(businessService.getUserPayments(user));
        }

        @PostMapping("acct/payments")
        public ResponseEntity<?> uploadPayment(@RequestBody @Valid ValidList<PostPaymentDto> payments) {
            return businessService.uploadPayment(payments);
        }

        @PutMapping("acct/payments")
        public ResponseEntity<?> updatePayment(@RequestBody @Valid PostPaymentDto payment) {
            return businessService.updatePayment(payment);
        }

    }
  learner_created: true
- name: src/account/service/BusinessService.java
  visible: true
  text: |
    package account.service;

    import account.dto.payment.GetPaymentDto;
    import account.dto.payment.PostPaymentDto;
    import account.mapper.Mapper;
    import account.model.Payment;
    import account.model.user.User;
    import account.repository.PaymentRepository;
    import account.util.ResponseStatus;
    import account.validator.Validators;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.time.LocalDate;
    import java.util.List;
    import java.util.stream.Collectors;

    @Service
    @Slf4j
    @AllArgsConstructor
    public class BusinessService {

        private final PaymentRepository paymentRepository;
        private final UserService userService;
        private final Mapper mapper;

        public List<GetPaymentDto> getUserPayments(User user) {
            log.info("Getting payments for \"" + user.getUsername() + "\"");
            return paymentRepository.findPaymentsByUser(user)
                    .stream()
                    .map(mapper::paymentToGetPaymentDto)
                    .collect(Collectors.toList());
        }

        public GetPaymentDto getUserPaymentByPeriod(User user, String period) {
            log.info("Getting payment for \"" + user.getUsername() + "\" at \"" + period + "\"");
            LocalDate periodDate = mapper.periodToLocalDate(period);
            return paymentRepository.findPaymentByUserAndPeriod(user, periodDate)
                    .stream()
                    .map(mapper::paymentToGetPaymentDto)
                    .findFirst()
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Unable to find resource"));
        }

        public ResponseEntity<?> uploadPayment(List<PostPaymentDto> postPaymentDtoList) {
            log.info("Uploading payment \"" + postPaymentDtoList + "\"");

            Validators.validateIsOneUser(postPaymentDtoList);
            String username = postPaymentDtoList.get(0).getEmployee().toLowerCase();
            User user = userService.loadUserByUsername(username);

            List<Payment> previousPayments = paymentRepository.findPaymentsByUser(user);
            List<Payment> payments = postPaymentDtoList.stream()
                    .map(p -> mapper.postPaymentDtoToPayment(p, userService))
                    .sorted((p1, p2) -> p2.getPeriod().compareTo(p1.getPeriod()))
                    .collect(Collectors.toList());

            previousPayments.addAll(payments);
            Validators.validateDistinctPeriodUserPairs(previousPayments);

            paymentRepository.saveAll(payments);
            return ResponseStatus.builder()
                    .add("status", "Added successfully!")
                    .build();
        }

        @Transactional
        public ResponseEntity<?> updatePayment(PostPaymentDto postPaymentDto) {
            log.info("Updating payment \"" + postPaymentDto + "\"");
            Payment payment = mapper.postPaymentDtoToPayment(postPaymentDto, userService);
            List<Payment> userPayments = paymentRepository.findPaymentsByUser(payment.getUser());
            Validators.validatePaymentPeriodExist(userPayments, payment);
            paymentRepository.updatePaymentByUserAndPeriod(
                    payment.getUser(),
                    payment.getPeriod(),
                    payment.getSalary()
            );
            return ResponseStatus.builder()
                    .add("status", "Updated successfully!")
                    .build();
        }

    }
  learner_created: true
- name: src/account/dto/user/GetUserDto.java
  visible: true
  text: |
    package account.dto.user;

    import lombok.*;

    import java.util.Set;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class GetUserDto {

        private Long id;
        private String name;
        private String lastname;
        private String email;

    }
  learner_created: true
- name: src/account/dto/user/CreateUserDto.java
  visible: true
  text: |
    package account.dto.user;

    import javax.validation.constraints.*;
    import lombok.*;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class CreateUserDto {

        @NotNull(message = "Name cannot be null")
        @NotBlank(message = "Name cannot be blank")
        private String name;

        @NotNull(message = "Lastname cannot be null")
        @NotBlank(message = "Lastname cannot be blank")
        private String lastname;

        @NotNull(message = "Email cannot be null")
        @NotBlank(message = "Email cannot be blank")
        @Email(message = "Email invalid format")
        @Pattern(regexp = ".+@acme.com", message = "Email invalid format")
        private String email;

        @NotNull(message = "Name cannot be null")
        @NotBlank(message = "Name cannot be blank")
        @Size(min = 12, max = 100, message = "Password length must be 12 chars minimum!")
        private String password;

    }
  learner_created: true
- name: src/account/model/Payment.java
  visible: true
  text: |
    package account.model;

    import account.model.user.User;
    import lombok.*;

    import javax.persistence.*;
    import java.time.LocalDate;
    import java.util.Objects;

    @Entity
    @Table(name = "payments")
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    @Getter
    @Setter
    public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        @Column(nullable = false)
        private LocalDate period;

        @ManyToOne
        @JoinColumn(name = "user_id")
        private User user;

        @Column(nullable = false)
        private Long salary;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Payment payment = (Payment) o;
            return Objects.equals(period, payment.period) &&
                    Objects.equals(user.getUsername(), payment.user.getUsername());
        }

        @Override
        public int hashCode() {
            return Objects.hash(period, user.getUsername());
        }
    }
  learner_created: true
- name: src/account/util/ResponseStatus.java
  visible: true
  text: |
    package account.util;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.LinkedHashMap;
    import java.util.Map;

    /**
     * for providing custom response body
     */
    public final class ResponseStatus {

        private final Map<String, Object> map = new LinkedHashMap<>();
        private HttpStatus httpStatus = HttpStatus.OK;

        public ResponseStatus add(String key, Object value) {
            map.put(key, value);
            return this;
        }

        public ResponseStatus status(HttpStatus httpStatus) {
            this.httpStatus = httpStatus;
            return this;
        }

        public ResponseEntity<Object> build() {
            return ResponseEntity.status(httpStatus).body(map);
        }

        public static ResponseStatus builder() {
            return new ResponseStatus();
        }

    }
  learner_created: true
- name: src/account/model/user/User.java
  visible: true
  text: |
    package account.model.user;

    import account.model.Payment;
    import lombok.*;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import java.util.*;
    import java.util.stream.Collectors;

    @Entity
    @Table(name = "users")
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    @Getter
    @Setter
    public class User implements UserDetails {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        @Column(nullable = false)
        private String name;

        @Column(nullable = false)
        private String lastname;

        @Column(nullable = false, unique = true)
        private String username;

        @Column(nullable = false)
        private String password;

        @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
        private List<Payment> payments;

        @ManyToMany(cascade = CascadeType.MERGE, fetch = FetchType.EAGER)
        @JoinTable(
                name = "user_roles",
                joinColumns =@JoinColumn(name = "user_id"),
                inverseJoinColumns = @JoinColumn(name = "role_id")
        )






        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return List.of(new SimpleGrantedAuthority("USER"));
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            User user = (User) o;
            return Objects.equals(id, user.id) && Objects.equals(username, user.username);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, username);
        }

        /**
         * Override Lombok builder
         */


    }
  learner_created: true
- name: src/account/mapper/Mapper.java
  visible: true
  text: |
    package account.mapper;

    import account.dto.payment.GetPaymentDto;
    import account.dto.payment.PostPaymentDto;
    import account.dto.user.CreateUserDto;
    import account.dto.user.GetUserDto;
    import account.model.Payment;
    import account.model.user.User;
    import account.service.UserService;
    import org.springframework.stereotype.Component;

    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;
    import java.util.Set;

    @Component
    public class Mapper {

        public GetUserDto userToGetUserDto(User user) {
            return GetUserDto.builder()
                    .id(user.getId())
                    .name(user.getName())
                    .lastname(user.getLastname())
                    .email(user.getUsername())
                    .build();
        }


        public User createUserDtoToUser(CreateUserDto createUserDto) {
            return User.builder()
                    .name(createUserDto.getName())
                    .lastname(createUserDto.getLastname())
                    .username(createUserDto.getEmail())
                    .password(createUserDto.getPassword())
                    .build();
        }

        public Payment postPaymentDtoToPayment(PostPaymentDto postPaymentDto,
                                               UserService userService) {
            return Payment.builder()
                    .user(userService.loadUserByUsername(postPaymentDto.getEmployee().toLowerCase()))
                    .salary(postPaymentDto.getSalary())
                    .period(periodToLocalDate(postPaymentDto.getPeriod()))
                    .build();
        }

        public GetPaymentDto paymentToGetPaymentDto(Payment payment) {
            return GetPaymentDto.builder()
                    .name(payment.getUser().getName())
                    .lastname(payment.getUser().getLastname())
                    .period(DateTimeFormatter.ofPattern("MMMM-yyyy").format(payment.getPeriod()))
                    .salary(String.format("%d dollar(s) %d cent(s)", payment.getSalary() / 100, payment.getSalary() % 100))
                    .build();
        }

        /**
         * @param period in format {month_number}-{year}
         * @return LocalDate with month and year
         */
        public LocalDate periodToLocalDate(String period) {
            String[] data = period.split("-");
            int month = Integer.parseInt(data[0]);
            int year = Integer.parseInt(data[1]);
            return LocalDate.of(year, month, 1);
        }
    }
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  text: |
    package account.controller;

    import account.dto.user.GetUserDto;
    import account.service.UserService;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.annotation.Secured;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @AllArgsConstructor
    @RestController
    @RequestMapping("api/admin")
    public class AdminController {

        private final UserService userService;



        @GetMapping("user")
        public List<GetUserDto> getUser() {
            return userService.getAllUsers();
        }

    }
  learner_created: true
- name: src/account/dto/payment/GetPaymentDto.java
  visible: true
  text: |
    package account.dto.payment;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class GetPaymentDto {

        private String name;
        private String lastname;
        private String period;
        private String salary;
    }
  learner_created: true
- name: src/account/dto/user/UpdatePasswordUserDto.java
  visible: true
  text: |
    package account.dto.user;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import lombok.*;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class UpdatePasswordUserDto {

        @NotNull(message = "New password cannot be null")
        @NotBlank(message = "New password cannot be blank")
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        private String newPassword;
    }
  learner_created: true
- name: src/account/config/MethodSecurityConfigurer.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
    import org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration;

    @Configuration
    @EnableGlobalMethodSecurity(
            prePostEnabled = true,
            securedEnabled = true,
            jsr250Enabled = true
    )
    public class MethodSecurityConfigurer extends GlobalMethodSecurityConfiguration {
    }
  learner_created: true
- name: src/account/model/user/Role.java
  visible: true
  learner_created: true
- name: src/account/model/user/RoleGroup.java
  visible: true
  learner_created: true
- name: src/account/model/user/RoleEntity.java
  visible: true
  learner_created: true
- name: src/account/repository/RoleRepository.java
  visible: true
  learner_created: true
- name: src/account/model/user/RoleLoader.java
  visible: true
  learner_created: true
- name: src/account/dto/user/UpdateRoleUserDto.java
  visible: true
  learner_created: true
- name: src/account/dto/user/Operation.java
  visible: true
  learner_created: true
- name: src/account/util/AppUtils.java
  visible: true
  learner_created: true
- name: src/account/validator/BreachedPasswordValidator.java
  visible: true
  learner_created: true
- name: src/account/validator/BreachedPassword.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1090/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 22 Mar 2023 01:06:04 UTC"
record: 5
