type: edu
files:
- name: src/resources/application.properties
  visible: true
  text: |2

    server.port=28852

    #  ***Required For Test***
    server.error.include-message=always

    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.jackson.serialization.INDENT_OUTPUT=true

    # color the console
    spring.output.ansi.enabled=ALWAYS

    #database settings
    spring.h2.console.enabled=true

    #  ***Required For Test***
    spring.datasource.url=jdbc:h2:file:../service_db
    #spring.datasource.url=jdbc:h2:file:C:\\Users\\profile1\\IdeaProjects\\Account Service\\Account Service\\task\\src\\account
    spring.datasource.username=sa
    spring.datasource.password=

    #  ***Required For Test***
    spring.jpa.hibernate.ddl-auto=update
    #spring.jpa.hibernate.ddl-auto=create-drop



    #LOG ERRORS IN CONSOLE
    logging.level.org.springframework.jdbc=DEBUG
    logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
    spring.jpa.show-sql=true




    spring.jackson.serialization.write-single-elem-arrays-unwrapped=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.7.3'
        id 'io.spring.dependency-management' version '1.1.0'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        runtimeOnly 'com.h2database:h2'

        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'
        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
        implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    }
  learner_created: false
- name: src/account/service/UserService.java
  visible: true
  text: |-
    package account.service;

    import account.dto.CustomResponse;
    import account.dto.Password;
    import account.dto.PasswordChangingResponse;
    import account.dto.PaymentsDTO;
    import account.entity.Payments;
    import account.entity.User;
    import account.exception.SamePasswordException;
    import account.exception.UserExistException;
    import account.repository.PaymentsRepository;
    import account.repository.UserRepository;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.lang.Long;
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.*;
    import java.util.logging.Logger;

    import static org.springframework.http.HttpStatus.BAD_REQUEST;

    @Service
    public class UserService {
        private final UserRepository userRepository;
        private final PaymentsRepository paymentsRepository;
        private final PasswordEvaluator passwordEvaluator;
        private final PasswordEncoder passwordEncoder;


        public UserService(PasswordEvaluator passwordEvaluator,
                           PasswordEncoder passwordEncoder,
                           UserRepository userRepository,
                           PaymentsRepository paymentsRepository) {
            this.passwordEvaluator = passwordEvaluator;
            this.passwordEncoder = passwordEncoder;
            this.userRepository = userRepository;
            this.paymentsRepository = paymentsRepository;
        }


        public ResponseEntity<?> signUp(User user) {

            passwordEvaluator.evaluatePassword(user.getPassword());

            if (checkIfEmailExists(user.getEmail())) {
                throw new UserExistException();
            }


            encodePassword(user);
            userRepository.save(user);

            return new ResponseEntity<>(user, HttpStatus.OK);
        }

        public User getUserByEmail(String email) {
            return userRepository.findUserByEmailIgnoreCase(email)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
        }

        private boolean checkIfEmailExists(String email) {

            return userRepository.findUserByEmailIgnoreCase(email).isPresent();
        }

        private boolean checkIfUserAlreadyExists(User user) {
            return userRepository.findUserByEmailIgnoreCase(user.getEmail()).isPresent();
        }

        private void encodePassword(User user) {
            user.setPassword(passwordEncoder.encode(user.getPassword()));
        }

        public List<Payments> getEmployeePayments(User user) {

            User userInDB = userRepository.findUserByEmailIgnoreCase(user.getEmail())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.UNAUTHORIZED));

            List<Payments> list = userInDB.getPaymentsList();
            return list;
        }


        public ResponseEntity<PasswordChangingResponse> changePass(User user, Password password) {

            passwordEvaluator.evaluatePassword(password.getNewPassword());

            User userInDB = getUserByEmail(user.getEmail());

            if (checkTheSamePassword(userInDB, password)) {
                throw new SamePasswordException();
            }

            String encryptedPassword = passwordEncoder.encode(password.getNewPassword());
            userInDB.setPassword(encryptedPassword);
            userRepository.save(userInDB);

            PasswordChangingResponse body = new PasswordChangingResponse(userInDB.getEmail().toLowerCase(),
                    "The password has been updated successfully");
            return new ResponseEntity<>(body, HttpStatus.OK);
        }

        private boolean checkTheSamePassword(User user, Password password) {
            return passwordEncoder.matches(password.getNewPassword(), user.getPassword());
        }

        @Transactional
        public ResponseEntity<?> uploadPayments(List<PaymentsDTO> paymentsDTOList) {

            System.out.println(paymentsDTOList.toString());

            // make sure an employee cannot have 2 payments on the same period

            if (paymentsDTOList.size() > 1) {
                for (int i = 1; i < paymentsDTOList.size(); i++) {
                    PaymentsDTO list = paymentsDTOList.get(i);
                    PaymentsDTO previousList = paymentsDTOList.get(i - 1);
                    String period1 = list.getPeriod();
                    String period2 = previousList.getPeriod();
                    if (period1.equals(period2)) {
                        throw new ResponseStatusException(BAD_REQUEST, "Invalid period");
                    }
                }
            }

            for (PaymentsDTO paymentsDTO : paymentsDTOList) {
                if (isValidPayments(paymentsDTO)) {
                    persistPayments(paymentsDTO);
                }
            }

            CustomResponse body = new CustomResponse();
            body.setStatus("Added successfully!");

            return new ResponseEntity<>(body, HttpStatus.OK);
        }

        public ResponseEntity<?> updatePayments(PaymentsDTO paymentsDTO) {

            try {

                if (isValidPayments(paymentsDTO)) {

                    String formattedPeriod = formatPeriod(paymentsDTO.getPeriod());
                    String formattedSalary = formatSalary(paymentsDTO.getSalary());

                    System.out.println("vbhjlgljhghijlgjkghjkhlghkjlghjkl"+formattedPeriod);
                    System.out.println("vbhjlgljhghijlgjkghjkhlghkjlghjkl"+paymentsDTO.getEmployeeEmail());
                    System.out.println("fkldjsfkljdskljfkldlksa" + formattedSalary);

                    Payments payments = paymentsRepository.findPaymentsOfEmployeeAtPeriod(
                            paymentsDTO.getEmployeeEmail().toLowerCase(), formattedPeriod
                            )
                            .orElseThrow(() -> new ResponseStatusException(BAD_REQUEST, "Payments do not exist"));



                    payments.setSalary(formattedSalary);


                    paymentsRepository.save(payments);

                    CustomResponse body = new CustomResponse();
                    body.setStatus("Updated successfully!");
                    return new ResponseEntity<>(body, HttpStatus.OK);
                }
            } catch (ParseException e) {
                throw new ResponseStatusException(BAD_REQUEST, "Invalid period");
            }
            throw new ResponseStatusException(BAD_REQUEST, "Error in updating the payments");
        }

        private void persistPayments(PaymentsDTO paymentsDTO) {
            try {
                String employeeEmail = paymentsDTO.getEmployeeEmail();

                String formattedPeriod = formatPeriod(paymentsDTO.getPeriod());
                User user = getUserByEmail(paymentsDTO.getEmployeeEmail());

                boolean duplicatedPayments = checkIfPaymentsPeriodExists(employeeEmail, formattedPeriod);
                if (duplicatedPayments) {
                    throw new ResponseStatusException(BAD_REQUEST, "A period cannot repeat for an employee email=" + paymentsDTO.getEmployeeEmail());
                }

                String formattedSalary = formatSalary(paymentsDTO.getSalary());
                Payments payments = new Payments(
                        user.getEmail(),
                        user.getName(),
                        user.getLastName(),
                        formattedPeriod,
                        formattedSalary);

                user.addPayments(payments);
                paymentsRepository.save(payments);
                userRepository.save(user);
            } catch (ParseException e) {
                // the period is validated already before this method
            }


        }

        private String formatSalary(Long salary) {

        StringBuilder dollar = new StringBuilder();
        StringBuilder cent = new StringBuilder();
        String salaryString = String.valueOf(salary);

        for (int i = salaryString.length() - 1; i >= 0; i--) {
            if (cent.length() < 2) {
                cent.append(salaryString.charAt(i));
            } else {
                dollar.append(salaryString.charAt(i));
            }
        }

        if (dollar.length() == 0) {
            dollar = new StringBuilder("0");
        }

        if (cent.length() == 0) {
            cent = new StringBuilder("0");
        }

        return String.format("%s dollar(s) %s cent(s)", dollar.reverse().toString(), cent.reverse().toString());

    }

        private String formatPeriod(String period) throws ParseException {

            SimpleDateFormat firstFormat = new SimpleDateFormat("MM-yyyy");
            firstFormat.setLenient(false);
            Date parsedDate = firstFormat.parse(period);

            //check if it can format "13-2020"
            SimpleDateFormat secondFormat = new SimpleDateFormat("MMMM-yyyy");
            String formattedDate = secondFormat.format(parsedDate);

            return formattedDate;

        }

        private boolean isValidPayments(PaymentsDTO paymentsDTO) {



            try {
                String employeeEmail = paymentsDTO.getEmployeeEmail();
                String formattedPeriod = formatPeriod(paymentsDTO.getPeriod());


                if (paymentsDTO.getSalary() < 0) {
                    throw new ResponseStatusException(BAD_REQUEST, "The salary must be a positive number");
                }

                // check user email exists
                if (!checkIfEmailExists(employeeEmail)) {
                    throw new ResponseStatusException(BAD_REQUEST, "Employee not found for email=" + paymentsDTO.getEmployeeEmail());
                }

            } catch (ParseException e) {
    //            e.printStackTrace();
                throw new ResponseStatusException(BAD_REQUEST, "Invalid period");
            }


            return true;
        }

        private boolean checkIfPaymentsPeriodExists(String employeeEmail, String period) {
            return paymentsRepository.findPaymentsOfEmployeeAtPeriod(employeeEmail, period).isPresent();
        }

        public Payments getEmployeePaymentsAtPeriod(User user, String period) {


            List<Payments> list = user.getPaymentsList();

            try {
                String formattedPeriod = formatPeriod(period);
                return list.stream()
                        .filter(p -> p.getPeriod().equals(formattedPeriod))
                        .findFirst()
                        .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Not found payments at period=" + period));

            } catch (ParseException e) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid period");
            }
        }


    }
  learner_created: false
- name: src/account/repository/UserRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.entity.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends JpaRepository<User, Long> {
        Optional<User> findUserByEmailIgnoreCase(String email);

    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.context.annotation.ComponentScan;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/account/controller/SecurityController.java
  visible: true
  text: |
    package account.controller;

    import account.model.event.Event;
    import account.service.EventService;
    import lombok.AllArgsConstructor;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;

    @AllArgsConstructor
    @RestController
    @RequestMapping("api/security")
    public class SecurityController {

        private final EventService eventService;

        @GetMapping("events")
        public List<Event> getEvents() {
            return eventService.getAllEvents();
        }
    }
  learner_created: true
- name: src/account/service/AuthService.java
  visible: true
  text: |
    package account.service;

    import account.dto.user.CreateUserDto;
    import account.dto.user.GetUserDto;
    import account.exception.ValidException;
    import account.mapper.Mapper;
    import account.model.event.Action;
    import account.model.user.Role;
    import account.model.user.User;
    import account.repository.RoleRepository;
    import account.repository.UserRepository;
    import account.util.ResponseStatus;
    import account.validator.Validators;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import javax.transaction.Transactional;
    import java.util.Set;

    @AllArgsConstructor
    @Service
    @Slf4j
    public class AuthService {

        private final UserRepository userRepository;
        private final RoleRepository roleRepository;
        private final PasswordEncoder passwordEncoder;
        private final Mapper mapper;
        private final EventService eventService;

        public GetUserDto register(CreateUserDto dto) {
            String username = mapper.emailToUsername(dto.getEmail());
            if (userRepository.findByUsername(username).isPresent()) {
                throw new ValidException("User exist!");
            }
            String encodedPassword = passwordEncoder.encode(dto.getPassword());
            Role role = userRepository.count() == 0L
                    ? Role.ADMINISTRATOR
                    : Role.USER;
            User user = User.builder()
                    .name(dto.getName())
                    .lastname(dto.getLastname())
                    .username(username)
                    .password(encodedPassword)
                    .roles(Set.of(role), roleRepository)
                    .build();
            eventService.log(Action.CREATE_USER, user.getEmail(), (String) null);
            return mapper.userToGetUserDto(userRepository.save(user));
        }

        @Transactional
        public User changePassword(User user, String password) {
            Validators.validatePasswordSame(password, user, passwordEncoder);
            user.setPassword(passwordEncoder.encode(password));
            eventService.log(Action.CHANGE_PASSWORD, user.getEmail(), user);
            return userRepository.save(user);
        }

        public GetUserDto getCurrentUser(User user) {
            return mapper.userToGetUserDto(user);
        }
    }
  learner_created: true
- name: src/account/config/RestAuthEntryPoint.java
  visible: true
  text: |
    package account.config;

    import lombok.AllArgsConstructor;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    @AllArgsConstructor
    public class RestAuthEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/config/EntityExceptionHandler.java
  visible: true
  text: |+
    package account.config;

    import account.util.ResponseStatus;
    import org.springframework.context.support.DefaultMessageSourceResolvable;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.util.Date;
    import java.util.stream.Collectors;

    @ControllerAdvice
    public class EntityExceptionHandler extends ResponseEntityExceptionHandler {

        @Override
        @ResponseBody
        protected ResponseEntity<Object> handleMethodArgumentNotValid(
                MethodArgumentNotValidException exception,
                HttpHeaders headers,
                HttpStatus status,
                WebRequest request) {
            String message = exception.getBindingResult().getAllErrors().stream()
                    .map(DefaultMessageSourceResolvable::getDefaultMessage)
                    .collect(Collectors.joining(", "));
            return ResponseStatus.builder()
                    .add("timestamp", new Date().toString())
                    .add("status", status.value())
                    .add("error", status.getReasonPhrase())
                    .add("message", message)
                    .add("path", request.getDescription(false).substring(4))
                    .status(HttpStatus.BAD_REQUEST)
                    .build();
        }

    }

  learner_created: true
- name: src/account/util/ValidList.java
  visible: true
  text: |
    package account.util;

    import lombok.Data;
    import lombok.experimental.Delegate;

    import javax.validation.Valid;
    import java.util.ArrayList;
    import java.util.List;

    @Data
    public class ValidList<E> implements List<E> {

        @Valid
        @Delegate
        private List<E> list = new ArrayList<>();
    }
  learner_created: true
- name: src/account/config/SecurityConfigurer.java
  visible: true
  text: |
    package account.config;

    import account.model.event.Action;
    import account.model.user.User;
    import account.service.EventService;
    import account.service.UserService;
    import lombok.AllArgsConstructor;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import static account.model.user.Role.*;

    @Configuration
    @EnableWebSecurity(debug = false)
    @AllArgsConstructor
    public class SecurityConfigurer extends WebSecurityConfigurerAdapter {

        private final RestAuthEntryPoint restAuthEntryPoint;
        private final UserService userService;
        private final PasswordEncoder passwordEncoder;
        private final EventService eventService;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userService).passwordEncoder(passwordEncoder);
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.httpBasic().authenticationEntryPoint(restAuthEntryPoint)
                    .and()
                    .csrf()
                    .disable()
                    .headers()
                    .frameOptions()
                    .disable()
                    .and()
                    .authorizeRequests()
                    // AdminController
                    .antMatchers("/api/admin/**")
                    .hasAnyRole(ADMINISTRATOR.name())
                    // AuthController
                    .antMatchers(HttpMethod.POST, "/api/auth/signup")
                    .permitAll()
                    .antMatchers(HttpMethod.POST, "/api/auth/changepass")
                    .hasAnyRole(USER.name(), ACCOUNTANT.name(), ADMINISTRATOR.name())
                    // BusinessController
                    .antMatchers(HttpMethod.GET, "/api/empl/payment")
                    .hasAnyRole(USER.name(), ACCOUNTANT.name())
                    .antMatchers(HttpMethod.POST, "/api/acct/payments")
                    .hasAnyRole(ACCOUNTANT.name())
                    .antMatchers(HttpMethod.PUT, "/api/acct/payments")
                    .hasAnyRole(ACCOUNTANT.name())
                    // SecurityController
                    .antMatchers("/api/security/**")
                    .hasAnyRole(AUDITOR.name())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
            http.exceptionHandling().accessDeniedHandler(accessDeniedHandler());
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler() {
            return (request, response, ex) -> {
                User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
                eventService.log(Action.ACCESS_DENIED, user);
                response.sendError(HttpStatus.FORBIDDEN.value(), "Access Denied!");
            };
        }

    }




    //package account.config;
    //
    //
    //import org.springframework.context.annotation.Bean;
    //import org.springframework.context.annotation.Configuration;
    //import org.springframework.http.HttpMethod;
    //import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    //import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    //import org.springframework.security.config.http.SessionCreationPolicy;
    //import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    //import org.springframework.security.crypto.password.PasswordEncoder;
    //import org.springframework.security.web.SecurityFilterChain;
    //
    //
    //@Configuration
    //@EnableWebSecurity
    //public class SecurityConfigurer {
    //
    //
    //    private final RestAuthEntryPoint restAuthenticationEntryPoint;
    //    private final BCryptConfigurer bCryptConfigurer;
    //
    //    public SecurityConfigurer(RestAuthEntryPoint restAuthenticationEntryPoint,
    //                              BCryptConfigurer bCryptConfigurer) {
    //        this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
    //        this.bCryptConfigurer = bCryptConfigurer;
    //    }
    //
    //    @Bean
    //    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
    //        return http
    //                .httpBasic()
    //                .authenticationEntryPoint(restAuthenticationEntryPoint)
    //                .and()
    //
    //                .csrf(csrf -> {
    //                    csrf.disable();
    //                    csrf.ignoringAntMatchers("/h2-console/**");
    //                })
    //                .headers(headers -> headers.frameOptions().disable())
    //
    //                .authorizeRequests(auth -> {
    //                    auth.antMatchers("/h2-console/**").permitAll();
    //                    auth.antMatchers(HttpMethod.PUT, "/api/acct/payments").permitAll();
    //                    auth.antMatchers(HttpMethod.POST, "/api/acct/payments").permitAll();
    //                    auth.antMatchers(HttpMethod.POST,"/api/auth/signup", "/actuator/shutdown").permitAll();
    //                    auth.anyRequest().authenticated();
    //                })
    //
    //                .sessionManagement()
    //                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
    //                .and()
    //
    //                .build();
    //    }
    //
    //
    //}
  learner_created: true
- name: src/account/dto/user/Operation.java
  visible: true
  text: |
    package account.dto.user;

    public enum Operation {
        GRANT, REMOVE
    }
  learner_created: true
- name: src/account/model/user/Role.java
  visible: true
  text: |-
    package account.model.user;

    import account.repository.RoleRepository;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import org.springframework.security.core.GrantedAuthority;

    @AllArgsConstructor
    @Getter
    public enum Role implements GrantedAuthority {

        USER(RoleGroup.BUSINESS),
        ACCOUNTANT(RoleGroup.BUSINESS),
        ADMINISTRATOR(RoleGroup.ADMINISTRATIVE),
        AUDITOR(RoleGroup.BUSINESS);

        private final RoleGroup group;

        RoleEntity toRoleEntity(RoleRepository repository) {
            return repository.findByRole(this).orElseThrow();
        }

        @Override
        public String getAuthority() {
            return "ROLE_" + name();
        }

        @Override
        public String toString() {
            return name();
        }
    }
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.dto.user.UpdatePasswordUserDto;
    import account.dto.user.CreateUserDto;
    import account.dto.user.GetUserDto;
    import account.model.user.User;
    import account.service.AuthService;
    import account.util.ResponseStatus;

    import javax.validation.Valid;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.annotation.Secured;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    @AllArgsConstructor
    @RestController
    @RequestMapping("api/auth")
    public class AuthController {

        private final AuthService authService;

        @PostMapping("signup")
        public GetUserDto register(@RequestBody @Valid CreateUserDto createUserDto) {
            return authService.register(createUserDto);
        }

        @PostMapping("changepass")
        public ResponseEntity<?> changePassword(@RequestBody @Valid UpdatePasswordUserDto updatePasswordUserDto,
                                                @AuthenticationPrincipal User user) {
            User changedUser = authService.changePassword(user, updatePasswordUserDto.getNewPassword());
            return ResponseStatus.builder()
                    .add("email", changedUser.getEmail())
                    .add("status", "The password has been updated successfully")
                    .build();
        }

        @GetMapping("login")
        public GetUserDto login(@AuthenticationPrincipal User user) {
            return authService.getCurrentUser(user);
        }
    }
  learner_created: true
- name: src/account/model/user/RoleLoader.java
  visible: true
  text: |-
    package account.model.user;

    import account.repository.RoleRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.CommandLineRunner;
    import org.springframework.context.annotation.Bean;
    import org.springframework.stereotype.Component;

    import java.util.Arrays;
    import java.util.Set;
    import java.util.stream.Collectors;

    @Component
    class RoleLoader {

        @Bean
        @Autowired
        CommandLineRunner initRoles(RoleRepository repository) {
            Set<RoleEntity> roles = repository.count() == 0L
                    ? Arrays.stream(Role.values())
                    .map(role -> RoleEntity.builder().role(role).build())
                    .collect(Collectors.toSet())
                    : Set.of();
            return args -> repository.saveAll(roles);
        }
    }
  learner_created: true
- name: src/account/exception/ValidException.java
  visible: true
  text: |
    package account.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    public class ValidException extends ResponseStatusException {
        public ValidException(String reason) {
            super(HttpStatus.BAD_REQUEST, reason);
        }
    }
  learner_created: true
- name: src/account/validator/Validators.java
  visible: true
  text: |
    package account.validator;

    import account.dto.payment.PostPaymentDto;
    import account.exception.ValidException;
    import account.model.Payment;
    import account.model.user.Role;
    import account.model.user.User;
    import account.repository.UserRepository;
    import org.springframework.security.crypto.password.PasswordEncoder;

    import java.util.List;
    import java.util.Set;

    public class Validators {

        private static final Set<String> breachedPasswords = Set.of(
                "PasswordForJanuary",
                "PasswordForFebruary",
                "PasswordForMarch",
                "PasswordForApril",
                "PasswordForMay",
                "PasswordForJune",
                "PasswordForJuly",
                "PasswordForAugust",
                "PasswordForSeptember",
                "PasswordForOctober",
                "PasswordForNovember",
                "PasswordForDecember"
        );

        public static void validatePeriod(String period) {
            if (period == null) {
                throw new ValidException("Period cannot be null");
            }
            if (!period.matches("(0?[1-9]|1[0-2])-\\d+")) {
                throw new ValidException("Period invalid format");
            }
        }

        public static void validatePasswordBreached(String password) {
            if (breachedPasswords.contains(password)) {
                throw new ValidException("The password is in the hacker's database!");
            }
        }

        public static void validatePasswordSame(String password, User user, PasswordEncoder passwordEncoder) {
            if (passwordEncoder.matches(password, user.getPassword())) {
                throw new ValidException("The passwords must be different!");
            }
        }

        public static void validatePaymentPeriodExist(List<Payment> payments, Payment payment) {
            boolean periodNotExist = payments.stream()
                    .map(Payment::getPeriod)
                    .noneMatch(d -> d.equals(payment.getPeriod()));
            if (periodNotExist) {
                throw new ValidException("Provided period data does not exist");
            }
        }

        public static void validateIsOneUser(List<PostPaymentDto> payments) {
            long users = payments.stream()
                    .map(PostPaymentDto::getEmployee)
                    .map(String::toLowerCase)
                    .distinct()
                    .count();
            if (users == 1) {
                throw new ValidException("Should be only one employee");
            }
        }

        /**
         * @param payments must implement equals and hashcode by username and period
         */
        public static void validateDistinctPeriodUserPairs(List<Payment> payments) {
            long distinctCount = payments.stream().distinct().count();
            if (distinctCount != payments.size()) {
                throw new ValidException("Employee-period pair must be unique");
            }
        }

        public static void validateRemoveUserRole(Set<Role> roles, Role roleToRemove) {
            if (roleToRemove == Role.ADMINISTRATOR) {
                throw new ValidException("Can't remove ADMINISTRATOR role!");
            }
            if (!roles.contains(roleToRemove)) {
                throw new ValidException("The user does not have a role!");
            }
            if (roles.size() == 1) {
                throw new ValidException("The user must have at least one role!");
            }
        }


    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.Payment;
    import account.model.user.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Modifying;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.query.Param;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDate;
    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface PaymentRepository extends JpaRepository<Payment, Long> {

        List<Payment> findPaymentsByUser(User user);

        Optional<Payment> findPaymentByUserAndPeriod(User user, LocalDate period);

        @Modifying
        @Query("UPDATE Payment p SET p.salary = :salary WHERE p.period = :period AND p.user = :user")
        void updatePaymentByUserAndPeriod(@Param("user") User user,
                           @Param("period") LocalDate period,
                           @Param("salary") Long salary);
    }
  learner_created: true
- name: src/account/config/BCryptConfigurer.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

    @Configuration
    public class BCryptConfigurer {

        @Bean
        public BCryptPasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }

    }
  learner_created: true
- name: src/account/util/AppUtils.java
  visible: true
  text: |-
    package account.util;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    public class AppUtils {

        public static <T extends Enum<T>> T valueOf(Class<T> enumType, String name) {
            try {
                return Enum.valueOf(enumType, name);
            } catch (Exception e) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, enumType.getSimpleName() + " not found!");
            }
        }

    }
  learner_created: true
- name: src/account/dto/payment/PostPaymentDto.java
  visible: true
  text: |
    package account.dto.payment;

    import javax.validation.constraints.*;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class PostPaymentDto {

        @NotNull(message = "Employee cannot be null")
        @NotBlank(message = "Employee cannot be blank")
        @Email(message = "Employee invalid format")
        @Pattern(regexp = ".+@acme.com", message = "Employee invalid format")
        private String employee;

        @NotNull(message = "Period cannot be null")
        @Pattern(regexp = "(0?[1-9]|1[0-2])-\\d+", message = "Period invalid format")
        private String period;

        @NotNull(message = "Salary cannot be null")
        @PositiveOrZero(message = "Salary cannot be negative")
        private Long salary;

    }
  learner_created: true
- name: src/account/repository/EventRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.model.event.Event;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EventRepository extends JpaRepository<Event, Long> {
    }
  learner_created: true
- name: src/account/listener/AuthSuccessListener.java
  visible: true
  text: |
    package account.listener;

    import account.model.user.User;
    import account.service.LoginAttemptService;
    import lombok.AllArgsConstructor;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    @Component
    @AllArgsConstructor
    public class AuthSuccessListener
            implements ApplicationListener<AuthenticationSuccessEvent> {

        private final LoginAttemptService loginAttemptService;

        @Override
        public void onApplicationEvent(AuthenticationSuccessEvent event) {
            User user = (User) event.getAuthentication().getPrincipal();
            loginAttemptService.loginSucceeded(user);
        }
    }
  learner_created: true
- name: src/account/controller/BusinessController.java
  visible: true
  text: |
    package account.controller;

    import account.dto.payment.PostPaymentDto;
    import account.model.user.User;
    import account.service.BusinessService;
    import account.util.ValidList;
    import account.validator.Validators;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.Optional;

    @RestController
    @AllArgsConstructor
    @RequestMapping("api")
    public class BusinessController {

        private final BusinessService businessService;

        @GetMapping("empl/payment")
        public ResponseEntity<?> getPayment(@RequestParam Optional<String> period,
                                            @AuthenticationPrincipal User user) {
            if (period.isPresent()) {
                Validators.validatePeriod(period.get());
                return ResponseEntity.ok(businessService.getUserPaymentByPeriod(user, period.get()));
            }
            return ResponseEntity.ok(businessService.getUserPayments(user));
        }

        @PostMapping("acct/payments")
        public ResponseEntity<?> uploadPayment(@RequestBody @Valid ValidList<PostPaymentDto> payments) {
            return businessService.uploadPayment(payments);
        }

        @PutMapping("acct/payments")
        public ResponseEntity<?> updatePayment(@RequestBody @Valid PostPaymentDto payment) {
            return businessService.updatePayment(payment);
        }

    }
  learner_created: true
- name: src/account/service/BusinessService.java
  visible: true
  text: |
    package account.service;

    import account.dto.payment.GetPaymentDto;
    import account.dto.payment.PostPaymentDto;
    import account.mapper.Mapper;
    import account.model.Payment;
    import account.model.user.User;
    import account.repository.PaymentRepository;
    import account.util.ResponseStatus;
    import account.validator.Validators;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.time.LocalDate;
    import java.util.List;
    import java.util.stream.Collectors;

    @Service
    @Slf4j
    @AllArgsConstructor
    public class BusinessService {

        private final PaymentRepository paymentRepository;
        private final UserService userService;
        private final Mapper mapper;

        public List<GetPaymentDto> getUserPayments(User user) {
            log.info("Getting payments for \"" + user.getUsername() + "\"");
            return paymentRepository.findPaymentsByUser(user)
                    .stream()
                    .map(mapper::paymentToGetPaymentDto)
                    .collect(Collectors.toList());
        }

        public GetPaymentDto getUserPaymentByPeriod(User user, String period) {
            log.info("Getting payment for \"" + user.getUsername() + "\" at \"" + period + "\"");
            LocalDate periodDate = mapper.periodToLocalDate(period);
            return paymentRepository.findPaymentByUserAndPeriod(user, periodDate)
                    .stream()
                    .map(mapper::paymentToGetPaymentDto)
                    .findFirst()
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Unable to find resource"));
        }

        public ResponseEntity<?> uploadPayment(List<PostPaymentDto> postPaymentDtoList) {
            log.info("Uploading payment \"" + postPaymentDtoList + "\"");

            Validators.validateIsOneUser(postPaymentDtoList);
            String username = postPaymentDtoList.get(0).getEmployee().toLowerCase();
            User user = userService.loadUserByUsername(username);

            List<Payment> previousPayments = paymentRepository.findPaymentsByUser(user);
            List<Payment> payments = postPaymentDtoList.stream()
                    .map(p -> mapper.postPaymentDtoToPayment(p, userService))
                    .sorted((p1, p2) -> p2.getPeriod().compareTo(p1.getPeriod()))
                    .collect(Collectors.toList());

            previousPayments.addAll(payments);
            Validators.validateDistinctPeriodUserPairs(previousPayments);

            paymentRepository.saveAll(payments);
            return ResponseStatus.builder()
                    .add("status", "Added successfully!")
                    .build();
        }

        @Transactional
        public ResponseEntity<?> updatePayment(PostPaymentDto postPaymentDto) {
            log.info("Updating payment \"" + postPaymentDto + "\"");
            Payment payment = mapper.postPaymentDtoToPayment(postPaymentDto, userService);
            List<Payment> userPayments = paymentRepository.findPaymentsByUser(payment.getUser());
            Validators.validatePaymentPeriodExist(userPayments, payment);
            paymentRepository.updatePaymentByUserAndPeriod(
                    payment.getUser(),
                    payment.getPeriod(),
                    payment.getSalary()
            );
            return ResponseStatus.builder()
                    .add("status", "Updated successfully!")
                    .build();
        }

    }
  learner_created: true
- name: src/account/dto/user/GetUserDto.java
  visible: true
  text: |
    package account.dto.user;

    import lombok.*;

    import java.util.Set;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class GetUserDto {

        private Long id;
        private String name;
        private String lastname;
        private String email;
        private Set<String> roles;
    //    private boolean accountNonLocked;

    }
  learner_created: true
- name: src/account/model/user/RoleEntity.java
  visible: true
  text: |-
    package account.model.user;

    import lombok.*;
    import org.hibernate.annotations.NaturalId;

    import javax.persistence.*;
    import java.util.Objects;
    import java.util.Set;

    @Entity
    @Table(name = "roles")
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    @Getter
    @Setter
    public class RoleEntity {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        @NaturalId
        @Column(nullable = false, unique = true)
        @Enumerated(EnumType.STRING)
        private Role role;

        @ManyToMany(mappedBy = "roles")
        private Set<User> users;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            RoleEntity that = (RoleEntity) o;
            return Objects.equals(id, that.id) && role == that.role;
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, role);
        }
    }
  learner_created: true
- name: src/account/dto/user/UpdateLockUserDto.java
  visible: true
  text: |
    package account.dto.user;


    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class UpdateLockUserDto {

        @NotNull(message = "User cannot be null")
        @NotBlank(message = "User cannot be blank")
        private String user;

        @NotNull(message = "Operation cannot be null")
        @NotBlank(message = "Operation cannot be blank")
        private String operation;

        public enum Operation {
            LOCK, UNLOCK
        }
    }
  learner_created: true
- name: src/account/model/event/Event.java
  visible: true
  text: |-
    package account.model.event;


    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import java.util.Date;

    @Entity
    @Table(name = "events")
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public class Event {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        @Column(nullable = false)
        private Date date;

        @Column(nullable = false)
        @Enumerated(EnumType.STRING)
        private Action action;

        @Column(nullable = false)
        private String subject;

        @Column(nullable = false)
        private String object;

        @Column(nullable = false)
        private String path;

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public Date getDate() {
            return date;
        }

        public void setDate(Date date) {
            this.date = date;
        }

        public Action getAction() {
            return action;
        }

        public void setAction(Action action) {
            this.action = action;
        }

        public String getSubject() {
            return subject;
        }

        public void setSubject(String subject) {
            this.subject = subject;
        }

        public String getObject() {
            return object;
        }

        public void setObject(String object) {
            this.object = object;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }
    }
  learner_created: true
- name: src/account/dto/user/CreateUserDto.java
  visible: true
  text: |
    package account.dto.user;

    import javax.validation.constraints.*;

    import account.validator.BreachedPassword;
    import lombok.*;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class CreateUserDto {

        @NotNull(message = "Name cannot be null")
        @NotBlank(message = "Name cannot be blank")
        private String name;

        @NotNull(message = "Lastname cannot be null")
        @NotBlank(message = "Lastname cannot be blank")
        private String lastname;

        @NotNull(message = "Email cannot be null")
        @NotBlank(message = "Email cannot be blank")
        @Email(message = "Email invalid format")
        @Pattern(regexp = ".+@acme.com", message = "Email invalid format")
        private String email;

        @NotNull(message = "Name cannot be null")
        @NotBlank(message = "Name cannot be blank")
        @Size(min = 12, max = 100, message = "Password length must be 12 chars minimum!")
        @BreachedPassword
        private String password;

    }
  learner_created: true
- name: src/account/model/Payment.java
  visible: true
  text: |
    package account.model;

    import account.model.user.User;
    import lombok.*;

    import javax.persistence.*;
    import java.time.LocalDate;
    import java.util.Objects;

    @Entity
    @Table(name = "payments")
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    @Getter
    @Setter
    public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        @Column(nullable = false)
        private LocalDate period;

        @ManyToOne
        @JoinColumn(name = "user_id")
        private User user;

        @Column(nullable = false)
        private Long salary;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Payment payment = (Payment) o;
            return Objects.equals(period, payment.period) &&
                    Objects.equals(user.getUsername(), payment.user.getUsername());
        }

        @Override
        public int hashCode() {
            return Objects.hash(period, user.getUsername());
        }
    }
  learner_created: true
- name: src/account/util/ResponseStatus.java
  visible: true
  text: |
    package account.util;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.LinkedHashMap;
    import java.util.Map;

    /**
     * for providing custom response body
     */
    public final class ResponseStatus {


        private final Map<String, Object> map = new LinkedHashMap<>();
        private HttpStatus httpStatus = HttpStatus.OK;

        public ResponseStatus add(String key, Object value) {
            map.put(key, value);
            return this;
        }

        public ResponseStatus status(HttpStatus httpStatus) {
            this.httpStatus = httpStatus;
            return this;
        }

        public ResponseEntity<Object> build() {
            return ResponseEntity.status(httpStatus).body(map);
        }

        public static ResponseStatus builder() {
            return new ResponseStatus();
        }

    }
  learner_created: true
- name: src/account/repository/RoleRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.model.user.RoleEntity;
    import account.model.user.Role;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface RoleRepository extends JpaRepository<RoleEntity, Long> {

        Optional<RoleEntity> findByRole(Role role);
        long count();
    }
  learner_created: true
- name: src/account/validator/BreachedPassword.java
  visible: true
  text: |-
    package account.validator;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.*;

    @Documented
    @Constraint(validatedBy = BreachedPasswordValidator.class)
    @Target({ElementType.FIELD})
    @Retention(RetentionPolicy.RUNTIME)
    public @interface BreachedPassword {
        String message() default "The password is in the hacker's database!";
        Class<?>[] groups() default {};
        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/model/event/Action.java
  visible: true
  text: |-
    package account.model.event;


    public enum Action {

        CREATE_USER("A user has been successfully registered"),
        CHANGE_PASSWORD("A user has changed the password successfully"),
        ACCESS_DENIED("A user is trying to access a resource without access rights"),
        LOGIN_FAILED("Failed authentication"),
        GRANT_ROLE("A role is granted to a user"),
        REMOVE_ROLE("A role has been revoked"),
        LOCK_USER("The Administrator has locked the user"),
        UNLOCK_USER("The Administrator has unlocked a user"),
        DELETE_USER("The Administrator has deleted a user"),
        BRUTE_FORCE("A user has been blocked on suspicion of a brute force attack");

        private final String description;

        Action(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }
    }
  learner_created: true
- name: src/account/model/user/User.java
  visible: true
  text: |-
    package account.model.user;


    import account.model.Payment;
    import account.repository.RoleRepository;
    import lombok.*;
    import org.hibernate.annotations.NaturalId;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import java.util.*;
    import java.util.stream.Collectors;

    @Entity
    @Table(name = "Users")
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public class User implements UserDetails {

        public static final String MAIL = "acme.com";

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;

        @Column(nullable = false)
        private String name;

        @Column(nullable = false)
        private String lastname;

        @NaturalId
        @Column(nullable = false, unique = true)
        private String username;

        @Column(nullable = false)
        private String password;

        @Column(nullable = false, columnDefinition = "boolean default true")
        @Builder.Default
        private Boolean accountNonLocked = true;

        @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
        private List<Payment> payments;

        @ManyToMany(cascade = CascadeType.MERGE, fetch = FetchType.EAGER)
        @JoinTable(
                name = "user_roles",
                joinColumns =@JoinColumn(name = "user_id"),
                inverseJoinColumns = @JoinColumn(name = "role_id")
        )
        private Set<RoleEntity> roles;

        public void addRole(Role role, RoleRepository repository) {
            roles.add(role.toRoleEntity(repository));
        }

        public void removeRole(Role role) {
            roles.removeIf((r) -> r.getRole() == role);
        }

        public Set<Role> getRoles() {
            return roles.stream()
                    .map(RoleEntity::getRole)
                    .collect(Collectors.toSet());
        }

        public void setRoles(Set<Role> roles, RoleRepository repository) {
            this.roles = roles.stream().map(r -> r.toRoleEntity(repository)).collect(Collectors.toSet());
        }

        public RoleGroup getUserRoleGroup() {
            return getRoles().stream()
                    .map(Role::getGroup)
                    .findFirst()
                    .orElseThrow();
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        @Override
        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        @Override
        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public void setAccountNonLocked(Boolean accountNonLocked) {
            this.accountNonLocked = accountNonLocked;
        }

        public List<Payment> getPayments() {
            return payments;
        }

        public void setPayments(List<Payment> payments) {
            this.payments = payments;
        }

        public void setRoles(Set<RoleEntity> roles) {
            this.roles = roles;
        }

        public String getEmail() {
            return username + "@" + MAIL;
        }

        public Boolean getAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return getRoles().stream()
                    .map(Role::getAuthority)
                    .map(SimpleGrantedAuthority::new)
                    .collect(Collectors.toSet());
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            User user = (User) o;
            return Objects.equals(id, user.id) &&
                    Objects.equals(username, user.username);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, username);
        }

        /**
         * Override Lombok builder
         */
        public static class UserBuilder {

            private Set<RoleEntity> roles;

            public UserBuilder roles(Set<Role> roles, RoleRepository repository) {
                this.roles = roles.stream().map(r -> r.toRoleEntity(repository)).collect(Collectors.toSet());
                return this;
            }
        }

    }
  learner_created: true
- name: src/account/mapper/Mapper.java
  visible: true
  text: |
    package account.mapper;

    import account.dto.payment.GetPaymentDto;
    import account.dto.payment.PostPaymentDto;
    import account.dto.user.CreateUserDto;
    import account.dto.user.GetUserDto;
    import account.model.Payment;
    import account.model.user.User;
    import account.repository.RoleRepository;
    import account.service.UserService;
    import account.model.user.Role;

    import org.springframework.stereotype.Component;
    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;
    import java.util.Set;
    import java.util.stream.Collectors;
    import java.util.LinkedHashSet;

    @Component
    public class Mapper {

        public GetUserDto userToGetUserDto(User user) {
            return GetUserDto.builder()
                    .id(user.getId())
                    .name(user.getName())
                    .lastname(user.getLastname())
                    .email(user.getEmail())
                    .roles(user.getRoles().stream()
                            .map(Role::getAuthority)
                            .sorted(String::compareTo)
                            .collect(Collectors.toCollection(LinkedHashSet::new)))
    //                .accountNonLocked(user.getAccountNonLocked())
                    .build();
        }


        public User createUserDtoToUser(CreateUserDto createUserDto,
                                        Set<Role> roles,
                                        RoleRepository roleRepository) {
            return User.builder()
                    .name(createUserDto.getName())
                    .lastname(createUserDto.getLastname())
                    .username(createUserDto.getEmail())
                    .password(createUserDto.getPassword())
                    .roles(roles, roleRepository)
                    .build();
        }

        public Payment postPaymentDtoToPayment(PostPaymentDto postPaymentDto,
                                               UserService userService) {
            return Payment.builder()
                    .user(userService.loadUserByUsername(postPaymentDto.getEmployee().toLowerCase()))
                    .salary(postPaymentDto.getSalary())
                    .period(periodToLocalDate(postPaymentDto.getPeriod()))
                    .build();
        }

        public GetPaymentDto paymentToGetPaymentDto(Payment payment) {
            return GetPaymentDto.builder()
                    .name(payment.getUser().getName())
                    .lastname(payment.getUser().getLastname())
                    .period(DateTimeFormatter.ofPattern("MMMM-yyyy").format(payment.getPeriod()))
                    .salary(String.format("%d dollar(s) %d cent(s)", payment.getSalary() / 100, payment.getSalary() % 100))
                    .build();
        }

        /**
         * @param period in format {month_number}-{year}
         * @return LocalDate with month and year
         */
        public LocalDate periodToLocalDate(String period) {
            String[] data = period.split("-");
            int month = Integer.parseInt(data[0]);
            int year = Integer.parseInt(data[1]);
            return LocalDate.of(year, month, 1);
        }

        public String emailToUsername(String email) {
            return splitEmail(email)[0];
        }

        public String[] splitEmail(String email) {
            return email.toLowerCase().split("@");
        }
    }
  learner_created: true
- name: src/account/service/EventService.java
  visible: true
  text: |
    package account.service;

    import account.model.event.Action;
    import account.model.event.Event;
    import account.model.user.User;
    import account.repository.EventRepository;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.data.domain.Sort;
    import org.springframework.stereotype.Service;

    import javax.servlet.http.HttpServletRequest;
    import java.util.Date;
    import java.util.List;

    @Service
    @AllArgsConstructor
    @Slf4j
    public class EventService {

        private final HttpServletRequest request;
        private final EventRepository eventRepository;

        public void log(Action action, String object, String username) {
            log.info(action.name() + ": " + object);
            Event event = Event.builder()
                    .date(new Date())
                    .action(action)
                    .subject(username == null ? "Anonymous" : username)
                    .object(object)
                    .path(request.getRequestURI().substring(request.getContextPath().length()))
                    .build();
            eventRepository.save(event);
        }

        public void log(Action action, String object, User user) {
            this.log(action, object, user.getEmail());
        }

        public void log(Action action, User user) {
            this.log(action, user.getEmail());
        }

        public void log(Action action, String username) {
            String object = request.getRequestURI().substring(request.getContextPath().length());
            this.log(action, object, username);
        }

        public List<Event> getAllEvents() {
            return eventRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
        }

    }
  learner_created: true
- name: src/account/service/LoginAttemptService.java
  visible: true
  text: |-
    package account.service;


    import account.model.event.Action;
    import account.model.user.Role;
    import account.model.user.User;

    import com.google.common.cache.CacheBuilder;
    import com.google.common.cache.CacheLoader;
    import com.google.common.cache.LoadingCache;

    import org.springframework.context.annotation.Lazy;
    import org.springframework.stereotype.Service;

    import javax.servlet.http.HttpServletRequest;
    import java.util.Optional;
    import java.util.concurrent.TimeUnit;

    /**
     * @see <a href="https://www.baeldung.com/spring-security-block-brute-force-authentication-attempts"
     */
    @Service
    public class LoginAttemptService {

        private final static int MAX_ATTEMPT = 5;

        private final LoadingCache<String, Integer> attempts;
        private final EventService eventService;
        private final UserService userService;

        public LoginAttemptService(EventService eventService,
                                   @Lazy UserService userService,
                                   HttpServletRequest request) {
            this.eventService = eventService;
            this.userService = userService;
            attempts = CacheBuilder
                    .newBuilder()
                    .expireAfterWrite(1, TimeUnit.DAYS)
                    .build(new CacheLoader<>() {
                        @Override
                        public Integer load(String key) {
                            return 0;
                        }
                    });
        }

        public void loginSucceeded(User user) {
            attempts.invalidate(user.getEmail());
        }

        public void loginFailed(String email) {
            eventService.log(Action.LOGIN_FAILED, email);
            attempts.put(email, Optional.ofNullable(attempts.getIfPresent(email))
                    .map(n -> n + 1)
                    .orElse(1));
            if (isBlocked(email)) {
                User user = userService.loadUserByUsername(email);
                if (user.getAccountNonLocked() && !user.getRoles().contains(Role.ADMINISTRATOR)) {
                    eventService.log(Action.BRUTE_FORCE, email);
                    userService.lock(email, user);
                }
            }
        }

        public void clean(String email) {
            attempts.invalidate(email);
        }

        public boolean isBlocked(String email) {
            return Optional.ofNullable(attempts.getIfPresent(email.toLowerCase()))
                    .map(n -> n >= MAX_ATTEMPT)
                    .orElse(false);
        }
    }
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  text: |
    package account.controller;

    import account.dto.user.GetUserDto;
    import account.dto.user.UpdateLockUserDto;
    import account.dto.user.UpdateRoleUserDto;
    import account.model.user.Role;
    import account.model.user.User;
    import account.service.UserService;
    import account.util.AppUtils;
    import account.util.ResponseStatus;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;
    import java.util.Optional;

    @AllArgsConstructor
    @RestController
    @RequestMapping("api/admin")
    public class AdminController {

        private final UserService userService;

        @PutMapping("user/role")
        public GetUserDto updateUserRole(@Valid @RequestBody UpdateRoleUserDto updateRoleUserDto,
                                         @AuthenticationPrincipal User user) {
            Role role = AppUtils.valueOf(Role.class, updateRoleUserDto.getRole());
            UpdateRoleUserDto.Operation operation =
                    AppUtils.valueOf(UpdateRoleUserDto.Operation.class, updateRoleUserDto.getOperation());
            switch (operation) {
                case GRANT:
                    return userService.grantRole(role, updateRoleUserDto.getUser(), user);
                case REMOVE:
                    return userService.removeRole(role, updateRoleUserDto.getUser(), user);
                default:
                    throw new IllegalStateException();
            }
        }
        @DeleteMapping("user/{username}")
        public ResponseEntity<?> deleteUser(@PathVariable(name = "username") String email,
                                            @AuthenticationPrincipal User user) {
            userService.deleteUser(email, user);
            return ResponseStatus.builder()
                    .add("status", "Deleted successfully!")
                    .add("user", email.toLowerCase())
                    .build();
        }

        @GetMapping("user")
        public List<GetUserDto> getUsers() {
            return userService.getAllUsers();
        }


        @PutMapping("user/access")
        public ResponseEntity<?> lockOrUnlock(@Valid @RequestBody UpdateLockUserDto dto,
                                              @AuthenticationPrincipal User user) {
            UpdateLockUserDto.Operation operation =
                    AppUtils.valueOf(UpdateLockUserDto.Operation.class, dto.getOperation());
            switch (operation) {
                case LOCK:
                    userService.lock(dto.getUser(), user);
                    return ResponseStatus.builder()
                            .add("status", "User " + dto.getUser().toLowerCase() + " locked!")
                            .build();
                case UNLOCK:
                    userService.unlock(dto.getUser(), user);
                    return ResponseStatus.builder()
                            .add("status", "User " + dto.getUser().toLowerCase() + " unlocked!")
                            .build();
                default:
                    throw new IllegalStateException();
            }
        }

    }
  learner_created: true
- name: src/account/model/user/RoleGroup.java
  visible: true
  text: |-
    package account.model.user;

    public enum RoleGroup {
        ADMINISTRATIVE, BUSINESS, NONE
    }
  learner_created: true
- name: src/account/validator/BreachedPasswordValidator.java
  visible: true
  text: |-
    package account.validator;


    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;
    import java.util.Set;

    public class BreachedPasswordValidator
            implements ConstraintValidator<BreachedPassword, String> {

        private static final Set<String> breachedPasswords = Set.of(
                "PasswordForJanuary",
                "PasswordForFebruary",
                "PasswordForMarch",
                "PasswordForApril",
                "PasswordForMay",
                "PasswordForJune",
                "PasswordForJuly",
                "PasswordForAugust",
                "PasswordForSeptember",
                "PasswordForOctober",
                "PasswordForNovember",
                "PasswordForDecember"
        );

        @Override
        public boolean isValid(String password, ConstraintValidatorContext ctx) {
            if (password == null) return true;
            return !breachedPasswords.contains(password);
        }
    }
  learner_created: true
- name: src/account/dto/payment/GetPaymentDto.java
  visible: true
  text: |
    package account.dto.payment;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class GetPaymentDto {

        private String name;
        private String lastname;
        private String period;
        private String salary;
    }
  learner_created: true
- name: src/account/dto/user/UpdateRoleUserDto.java
  visible: true
  text: |-
    package account.dto.user;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class UpdateRoleUserDto {

        @NotNull(message = "User cannot be null")
        @NotBlank(message = "User cannot be blank")
        private String user;

        @NotNull(message = "Role cannot be null")
        private String role;

        @NotNull(message = "Operation cannot be null")
        private String operation;

        public enum Operation {
            GRANT, REMOVE
        }

    }
  learner_created: true
- name: src/account/listener/AuthFailureListener.java
  visible: true
  text: |
    package account.listener;


    import account.service.LoginAttemptService;
    import lombok.AllArgsConstructor;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
    import org.springframework.stereotype.Component;

    @Component
    @AllArgsConstructor
    public class AuthFailureListener
            implements ApplicationListener<AuthenticationFailureBadCredentialsEvent> {

        private final LoginAttemptService loginAttemptService;

        @Override
        public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent event) {
            String email = (String) event.getAuthentication().getPrincipal();
            loginAttemptService.loginFailed(email);
        }
    }
  learner_created: true
- name: src/account/dto/user/UpdatePasswordUserDto.java
  visible: true
  text: |
    package account.dto.user;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;

    import account.validator.BreachedPassword;
    import lombok.*;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public class UpdatePasswordUserDto {

        @NotNull(message = "New password cannot be null")
        @NotBlank(message = "New password cannot be blank")
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @BreachedPassword
        private String newPassword;
    }
  learner_created: true
- name: src/resources/keystore/keystore.p12
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1092/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 22 Mar 2023 23:37:26 UTC"
record: -1
