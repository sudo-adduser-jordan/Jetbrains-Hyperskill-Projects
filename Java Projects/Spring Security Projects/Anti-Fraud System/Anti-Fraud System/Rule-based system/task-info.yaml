type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true

    transaction.values.initial-max-allowed=200
    transaction.values.initial-max-manual=1500
    transaction.values.current-limit-modifier=0.8
    transaction.values.value-from-transaction-modifier=0.2
    transaction.values.region-and-ip-limit=3
    user.administrator-count=1

    security.enable.csrf=false
    spring.h2.console.enabled=true
    spring.h2.console.path=/h2
    #spring.h2.console.settings.trace=true
    spring.datasource.driverClassName=org.h2.Driver
    #logging.level.org.hibernate.SQL=DEBUG
    logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
    spring.jpa.show-sql=true
    spring.jpa.hibernate.ddl-auto=update


    #IN MEMORY FOR IMPLEMENTING
    #spring.datasource.url=jdbc:h2:mem:testDB
    #FILE SAVE FOR IMPLEMENTING
    #spring.datasource.url=jdbc:h2:file:./Anti-Fraud System/task/src/database/service_db
    #FILE SAVE FOR HYPERSKILL TESTS
    spring.datasource.url=jdbc:h2:file:./service_db

    springdoc.api-docs.path=/anti-fraud-rest-api-docs
    springdoc.swagger-ui.path=/swagger/swagger-ui-anti-fraud-rest-api.html
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.7.3'
        id 'io.spring.dependency-management' version '1.1.0'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
        implementation 'org.projectlombok:lombok:1.18.24'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'com.h2database:h2'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.springdoc:springdoc-openapi-ui:1.6.5'
        implementation 'org.mockito:mockito-junit-jupiter:4.5.1'
        implementation 'org.mockito:mockito-inline:5.1.1'
        implementation 'org.springdoc:springdoc-openapi-ui:1.6.5'

        annotationProcessor 'org.projectlombok:lombok:1.18.24'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'


    }
  learner_created: false
- name: src/antifraud/service/UserService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.model.response.delete.DeletedUser;
    import antifraud.model.dto.UserDTO;
    import antifraud.model.request.UserRoleRequest;
    import antifraud.model.request.UserStatusRequest;
    import antifraud.model.response.UserResponse;
    import antifraud.model.response.UserStatusChangeResponse;
    import org.springframework.security.core.userdetails.UserDetailsService;

    import java.util.List;

    public interface UserService extends UserDetailsService {
        UserResponse registerUser(UserDTO userDTO);

        DeletedUser deleteUser(String username);

        List<UserResponse> listUsers();

        UserResponse updateUserRole(UserRoleRequest userRoleRequest);

        UserStatusChangeResponse changeUserStatus(UserStatusRequest userStatusRequest);
    }
  learner_created: false
- name: src/antifraud/security/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package antifraud.security;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;


    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: false
- name: src/antifraud/service/TransactionService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.model.Transaction;
    import antifraud.model.TransactionFeedback;
    import antifraud.model.request.TransactionRequest;
    import antifraud.model.response.TransactionResponse;

    import java.util.List;

    public interface TransactionService {
        TransactionResponse processTransaction(TransactionRequest transactionRequest);

        Transaction transactionFeedback(TransactionFeedback transactionFeedback);

        List<Transaction> listTransactions();

        List<Transaction> getTransactionById(String number);
    }
  learner_created: false
- name: src/antifraud/model/dto/UserDTO.java
  visible: true
  text: |
    package antifraud.model.dto;

    import lombok.Getter;
    import lombok.Setter;

    import javax.validation.constraints.NotEmpty;

    @Getter
    @Setter
    public class UserDTO {
        @NotEmpty
        String name;
        @NotEmpty
        String username;
        @NotEmpty
        String password;

        @Override
        public String toString() {
            return "UserDTO{" +
                    "name='" + name + '\'' +
                    ", username='" + username + '\'' +
                    ", password='" + password + '\'' +
                    '}';
        }
    }
  learner_created: false
- name: src/antifraud/model/dto/StolenCardDTO.java
  visible: true
  text: |
    package antifraud.model.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.Getter;
    import lombok.Setter;
    import org.hibernate.validator.constraints.CreditCardNumber;

    import javax.validation.constraints.NotEmpty;

    @Getter
    @Setter
    public class StolenCardDTO {
        @JsonProperty(access = JsonProperty.Access.READ_WRITE)
        Long id;
        @NotEmpty
        @CreditCardNumber
        String number;
    }
  learner_created: false
- name: src/antifraud/model/dto/SuspiciousIpDTO.java
  visible: true
  text: |-
    package antifraud.model.dto;

    import antifraud.validation.IpAddress;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.Getter;
    import lombok.Setter;


    @Getter
    @Setter
    public class SuspiciousIpDTO {
        @JsonProperty(access = JsonProperty.Access.READ_WRITE)
        Long id;
        @IpAddress
        String ip;
    }
  learner_created: false
- name: src/antifraud/model/enums/Roles.java
  visible: true
  text: |
    package antifraud.model.enums;

    public enum Roles {
        ADMINISTRATOR,MERCHANT,SUPPORT,ANONYMOUS
    }
  learner_created: false
- name: src/antifraud/model/enums/AccountStatus.java
  visible: true
  text: |
    package antifraud.model.enums;

    public enum AccountStatus {
        LOCK,UNLOCK
    }
  learner_created: false
- name: src/antifraud/model/enums/TransactionResult.java
  visible: true
  text: |
    package antifraud.model.enums;

    public enum TransactionResult {
        ALLOWED,MANUAL_PROCESSING,PROHIBITED
    }
  learner_created: false
- name: src/antifraud/model/request/UserRoleRequest.java
  visible: true
  text: |
    package antifraud.model.request;

    import antifraud.model.enums.Roles;
    import lombok.Getter;
    import lombok.Setter;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;

    @Getter
    @Setter
    public class UserRoleRequest{

        @NotEmpty
        String username;
        @NotNull
        Roles role;

        @Override
        public String toString() {
            return "UserRoleRequest{" +
                    "username='" + username + '\'' +
                    ", role=" + role +
                    '}';
        }
    }
  learner_created: false
- name: src/antifraud/model/request/UserStatusRequest.java
  visible: true
  text: |
    package antifraud.model.request;

    import antifraud.model.enums.AccountStatus;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;

    @Getter
    @Setter
    @AllArgsConstructor
    @NoArgsConstructor
    public class UserStatusRequest {
        @NotEmpty
        String username;
        @NotNull
        AccountStatus operation;
    }
  learner_created: false
- name: src/antifraud/model/request/TransactionRequest.java
  visible: true
  text: |
    package antifraud.model.request;

    import antifraud.validation.IpAddress;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;
    import org.hibernate.validator.constraints.CreditCardNumber;

    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Positive;

    @Getter
    @Setter
    @AllArgsConstructor
    @NoArgsConstructor
    public class TransactionRequest {

        @Id
        @GeneratedValue
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        Long id;
        @Positive
        @NotNull
        Long amount;
        @IpAddress
        String ip;
        @CreditCardNumber
        String number;


        @Override
        public String toString() {
            return "TransactionRequest{" +
                    "id=" + id +
                    ", amount=" + amount +
                    ", ip='" + ip + '\'' +
                    ", number='" + number + '\'' +
                    '}';
        }
    }
  learner_created: false
- name: src/antifraud/model/response/delete/DeletedIp.java
  visible: true
  text: |
    package antifraud.model.response.delete;


    import com.fasterxml.jackson.annotation.JsonProperty;

    public record DeletedIp(@JsonProperty("status") String ip) {

        public DeletedIp(String ip) {
            this.ip =  "IP "+ ip +" successfully removed!";
        }
    }
  learner_created: false
- name: src/antifraud/model/response/delete/DeleteCard.java
  visible: true
  text: |
    package antifraud.model.response.delete;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public record DeleteCard(@JsonProperty("status") String number) {
        public DeleteCard(String number) {
            this.number =  "Card "+ number +" successfully removed!";
        }
    }
  learner_created: false
- name: src/antifraud/model/response/delete/DeletedUser.java
  visible: true
  text: |-
    package antifraud.model.response.delete;


    public record DeletedUser(String username,String status) {
        public DeletedUser(String username) {
            this(username,"Deleted successfully!");
        }

    }
  learner_created: false
- name: src/antifraud/model/response/UserResponse.java
  visible: true
  text: |
    package antifraud.model.response;

    import antifraud.model.enums.Roles;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.Setter;

    @Getter
    @Setter
    @AllArgsConstructor
    public class UserResponse {
        Long id;
        String name;
        String username;
        Roles role;
    }
  learner_created: false
- name: src/antifraud/model/response/TransactionResponse.java
  visible: true
  text: |
    package antifraud.model.response;

    import antifraud.model.enums.TransactionResult;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Getter
    @Setter
    @AllArgsConstructor
    @NoArgsConstructor
    public class TransactionResponse {
        TransactionResult result;
        String info;
    }
  learner_created: false
- name: src/antifraud/model/response/UserStatusChangeResponse.java
  visible: true
  text: |
    package antifraud.model.response;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.Setter;

    @Getter
    @Setter
    @AllArgsConstructor
    public class UserStatusChangeResponse {
        String status;
    }
  learner_created: false
- name: src/antifraud/model/Card.java
  visible: true
  text: |
    package antifraud.model;

    import lombok.Getter;
    import lombok.Setter;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;

    @Entity
    @Getter
    @Setter
    public class Card {
        @Id
        @GeneratedValue
        private Long id;
        @Column(unique = true)
        String number;
        @Column(name = "max_allowed")
        int maxAllowed;
        @Column(name = "max_manual")
        int maxManual;
    }
  learner_created: false
- name: src/antifraud/model/User.java
  visible: true
  text: |-
    package antifraud.model;

    import antifraud.model.enums.Roles;
    import lombok.Getter;
    import lombok.Setter;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.GenerationType;
    import javax.persistence.Id;
    import javax.persistence.Table;

    @Getter
    @Setter
    @Entity
    @Table(name = "users")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        Long id;
        String name;
        @Column(unique = true, nullable = false)
        String username;
        String password;
        Roles role;
        @Column(name = "account_non_locked")
        boolean accountNonLocked = false;

        @Override
        public String toString() {
            return "User{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", username='" + username + '\'' +
                    ", password='" + password + '\'' +
                    ", role=" + role +
                    ", accountNonLocked=" + accountNonLocked +
                    '}';
        }
    }
  learner_created: false
- name: src/antifraud/model/StolenCard.java
  visible: true
  text: |
    package antifraud.model;

    import lombok.Getter;
    import lombok.Setter;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;

    @Getter
    @Setter
    @Entity
    public class StolenCard {
        @Id
        @GeneratedValue
        private Long id;
        @Column(nullable = false)
        String number;


        public StolenCard(Long id, String number) {
            this.id = id;
            this.number = number;
        }

        public StolenCard() {

        }
    }
  learner_created: false
- name: src/antifraud/model/Transaction.java
  visible: true
  text: |
    package antifraud.model;


    import antifraud.model.enums.TransactionResult;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.persistence.Table;

    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    @Table(name = "transaction")
    public class Transaction {
        @Id
        @GeneratedValue
        @Column(name = "id")
        private Long transactionId;
        Long amount;
        String ip;
        String number;
        TransactionResult result;
        TransactionResult feedback;

        public String getFeedback() {
            return feedback == null ? "" : feedback.name();
        }
    }
  learner_created: false
- name: src/antifraud/model/SuspiciousIp.java
  visible: true
  text: |
    package antifraud.model;

    import lombok.Getter;
    import lombok.Setter;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.persistence.Index;
    import javax.persistence.Table;

    @Getter
    @Setter
    @Entity
    @Table(indexes = {@Index( name = "idx_identity_ip_unq",columnList = "ip",unique = true)})
    public class SuspiciousIp {
        @Id
        @GeneratedValue
        Long id;
        @Column(nullable = false)
        String ip;
    }
  learner_created: false
- name: src/antifraud/model/TransactionFeedback.java
  visible: true
  text: |
    package antifraud.model;

    import antifraud.model.enums.TransactionResult;
    import lombok.Getter;
    import lombok.Setter;

    import javax.validation.constraints.NotNull;

    @Getter
    @Setter
    public class TransactionFeedback {
        @NotNull
        Long transactionId;
        @NotNull
        TransactionResult feedback;
    }
  learner_created: false
- name: src/antifraud/mappers/ModelMapper.java
  visible: true
  text: |
    package antifraud.mappers;

    import antifraud.model.StolenCard;
    import antifraud.model.SuspiciousIp;
    import antifraud.model.Transaction;
    import antifraud.model.User;
    import antifraud.model.dto.StolenCardDTO;
    import antifraud.model.dto.SuspiciousIpDTO;
    import antifraud.model.dto.UserDTO;
    import antifraud.model.request.TransactionRequest;
    import antifraud.model.response.UserResponse;

    public class ModelMapper {

        public static User userDTOtoUser(UserDTO userDTO) {
            User user = new User();
            user.setName(userDTO.getName());
            user.setUsername(userDTO.getUsername());
            user.setPassword(userDTO.getPassword());
            return user;
        }
        public static UserResponse userToUserResponse(User user) {
            return new UserResponse(user.getId(), user.getName(), user.getUsername(), user.getRole());
        }

        public static SuspiciousIp suspiciousIpDTOtoSuspiciousIp(SuspiciousIpDTO ipDTO){
            SuspiciousIp ip =  new SuspiciousIp();
            ip.setIp(ipDTO.getIp());
            return ip;
        }
        public static StolenCard stolenCardDTOtoStolenCard(StolenCardDTO stolenCardDTO) {
            StolenCard stolenCard = new StolenCard();
            stolenCard.setNumber(stolenCardDTO.getNumber());
            return stolenCard;
        }

        public static Transaction transactionRequestToTransaction(TransactionRequest transactionRequest){
            Transaction transaction = new Transaction();
            transaction.setAmount(transactionRequest.getAmount());
            transaction.setIp(transactionRequest.getIp());
            transaction.setNumber(transactionRequest.getNumber());
            return transaction;
        }
    }
  learner_created: false
- name: src/antifraud/service/impl/CardServiceImpl.java
  visible: true
  text: |-
    package antifraud.service.impl;

    import antifraud.model.Card;
    import antifraud.repository.CardRepository;
    import antifraud.service.CardService;
    import lombok.AllArgsConstructor;
    import org.springframework.stereotype.Service;

    @Service
    @AllArgsConstructor
    public class CardServiceImpl implements CardService {
        private final CardRepository cardRepository;

        @Override
        public boolean existsByNumber(String cardNumber) {
            return cardRepository.existsByNumber(cardNumber);
        }

        @Override
        public Card findByNumber(String cardNumber) {
            return cardRepository.findByNumber(cardNumber);
        }

        @Override
        public Card save(Card regularCard) {
            return cardRepository.save(regularCard);
        }

        @Override
        public void updateMaxAllowedAndMaxManualByNumber(int maxAllowed, int maxManual, String number) {
            cardRepository.updateMaxAllowedAndMaxManualByNumber(maxAllowed, maxManual, number);
        }

        @Override
        public void updateMaxAllowedByNumber(int maxAllowed, String number) {
            cardRepository.updateMaxAllowedByNumber(maxAllowed, number);
        }

        @Override
        public void updateMaxManualByNumber(int maxManual, String number) {
            cardRepository.updateMaxManualByNumber(maxManual, number);
        }
    }
  learner_created: false
- name: src/antifraud/service/impl/UserServiceImpl.java
  visible: true
  text: |
    package antifraud.service.impl;

    import antifraud.mappers.ModelMapper;
    import antifraud.model.User;
    import antifraud.model.response.delete.DeletedUser;
    import antifraud.model.dto.UserDTO;
    import antifraud.model.enums.AccountStatus;
    import antifraud.model.enums.Roles;
    import antifraud.model.request.UserRoleRequest;
    import antifraud.model.request.UserStatusRequest;
    import antifraud.model.response.UserResponse;
    import antifraud.model.response.UserStatusChangeResponse;
    import antifraud.repository.UserRepository;
    import antifraud.security.UserDetailsImpl;
    import antifraud.service.UserService;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;

    import static antifraud.exception.ExceptionMessages.FORBIDDEN_ROLE;
    import static antifraud.exception.ExceptionMessages.INVALID_REQUEST;
    import static antifraud.exception.ExceptionMessages.PRESENT_ROLE;
    import static antifraud.exception.ExceptionMessages.UNIQUE_USERNAME;
    import static antifraud.exception.ExceptionMessages.USER_NOT_FOUND;
    import static antifraud.mappers.ModelMapper.userDTOtoUser;
    import static antifraud.mappers.ModelMapper.userToUserResponse;

    @Service
    public class UserServiceImpl implements UserService {
        final UserRepository userRepository;
        final PasswordEncoder encoder;
        @Value("${user.administrator-count}")
        private int administratorCount;

        public UserServiceImpl(UserRepository userRepository, PasswordEncoder encoder) {
            this.userRepository = userRepository;
            this.encoder = encoder;
        }

        @Override
        public UserResponse registerUser(UserDTO userDTO) {
            User user = userDTOtoUser(userDTO);
            user.setPassword(encoder.encode(user.getPassword()));

            try {
                userRepository.save(user);
                if (user.getId() == administratorCount) {
                    user.setRole(Roles.ADMINISTRATOR);
                    user.setAccountNonLocked(true);
                    userRepository.updateRoleById(Roles.ADMINISTRATOR, user.getId());
                } else {
                    user.setRole(Roles.MERCHANT);
                    userRepository.updateRoleById(Roles.MERCHANT, user.getId());
                }
            } catch (RuntimeException exception) {
                throw new ResponseStatusException(HttpStatus.CONFLICT, UNIQUE_USERNAME);
            }
            return userToUserResponse(user);
        }

        @Override
        public DeletedUser deleteUser(String username) {
            if (userRepository.deleteUserByUsername(username) == 0) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND);
            }
            return new DeletedUser(username);
        }

        @Override
        public List<UserResponse> listUsers() {
            return userRepository.findAll().stream().map(ModelMapper::userToUserResponse).toList();
        }

        @Override
        public UserResponse updateUserRole(UserRoleRequest userRoleRequest) {
            checkUserRole(userRoleRequest.getRole());
            User user = userRepository.findByUsername(userRoleRequest.getUsername())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND));
            if (user.getRole() != userRoleRequest.getRole()) {
                userRepository.updateRoleByUsername(userRoleRequest.getRole(), userRoleRequest.getUsername());
                user.setRole(userRoleRequest.getRole());
            } else {
                throw new ResponseStatusException(HttpStatus.CONFLICT, PRESENT_ROLE);
            }
            return userToUserResponse(user);
        }

        @Override
        public UserStatusChangeResponse changeUserStatus(UserStatusRequest userStatusRequest) {
            User user = userRepository.findByUsername(userStatusRequest.getUsername())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
            if (user.isAccountNonLocked() && userStatusRequest.getOperation().equals(AccountStatus.LOCK)) {
                user.setAccountNonLocked(false);
                userRepository.save(user);
                return new UserStatusChangeResponse("User " + user.getUsername() + " locked!");
            } else if (!user.isAccountNonLocked() && userStatusRequest.getOperation().equals(AccountStatus.UNLOCK)) {
                user.setAccountNonLocked(true);
                userRepository.save(user);
                return new UserStatusChangeResponse("User " + user.getUsername() + " unlocked!");
            }
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, INVALID_REQUEST);
        }
        private void checkUserRole(Roles role) {
            if (!role.equals(Roles.SUPPORT) && !role.equals(Roles.MERCHANT)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, FORBIDDEN_ROLE);
            }
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByUsername(username)
                    .orElseThrow(() ->  new UsernameNotFoundException("Not found: " + username));
            return new UserDetailsImpl(user);
        }
    }
  learner_created: false
- name: src/antifraud/service/impl/StolenCardServiceImpl.java
  visible: true
  text: |
    package antifraud.service.impl;

    import antifraud.model.StolenCard;
    import antifraud.model.dto.StolenCardDTO;
    import antifraud.repository.StolenCardRepository;
    import antifraud.service.StolenCardService;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;
    import java.util.Optional;

    import static antifraud.mappers.ModelMapper.stolenCardDTOtoStolenCard;

    @Service
    public class StolenCardServiceImpl implements StolenCardService {

        final StolenCardRepository stolenCardRepository;

        public StolenCardServiceImpl(StolenCardRepository stolenCardRepository) {
            this.stolenCardRepository = stolenCardRepository;
        }

        @Transactional
        public Optional<StolenCard> addStolenCard(StolenCardDTO stolenCardDTO) {
            if (stolenCardRepository.existsByNumber(stolenCardDTO.getNumber())) {
                return Optional.empty();
            }
            StolenCard stolenCard = stolenCardDTOtoStolenCard(stolenCardDTO);
            return Optional.of(stolenCardRepository.save(stolenCard));
        }

        public List<StolenCard> listStolenCards() {
            return stolenCardRepository.findAll();
        }

        @Transactional
        public boolean deleteStolenCard(String number) {
            return stolenCardRepository.deleteByNumber(number) == 1;
        }

        @Override
        public boolean existsByNumber(String number) {
            return stolenCardRepository.existsByNumber(number);
        }
    }
  learner_created: false
- name: src/antifraud/service/impl/TransactionServiceImpl.java
  visible: true
  text: |
    package antifraud.service.impl;

    import antifraud.configuration.TransactionProperty;
    import antifraud.model.Card;
    import antifraud.model.Transaction;
    import antifraud.model.TransactionFeedback;
    import antifraud.model.enums.TransactionResult;
    import antifraud.model.request.TransactionRequest;
    import antifraud.model.response.TransactionResponse;
    import antifraud.repository.TransactionRepository;
    import antifraud.service.CardService;
    import antifraud.service.StolenCardService;
    import antifraud.service.SuspiciousIpService;
    import antifraud.service.TransactionService;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;

    import static antifraud.exception.ExceptionMessages.TRANSACTION_NOT_FOUND;
    import static antifraud.mappers.ModelMapper.transactionRequestToTransaction;
    import static antifraud.model.enums.TransactionResult.ALLOWED;
    import static antifraud.model.enums.TransactionResult.MANUAL_PROCESSING;
    import static antifraud.model.enums.TransactionResult.PROHIBITED;

    @Slf4j
    @Service
    public class TransactionServiceImpl implements TransactionService {
        final TransactionRepository transactionRepository;
        final StolenCardService stolenCardService;
        final SuspiciousIpService suspiciousIpService;
        final CardService cardService;
        final TransactionProperty transactionProperty;

        public TransactionServiceImpl(TransactionRepository transactionRepository, StolenCardService stolenCardService, SuspiciousIpService suspiciousIpService, CardService cardService, TransactionProperty transactionProperty) {
            this.transactionRepository = transactionRepository;
            this.stolenCardService = stolenCardService;
            this.suspiciousIpService = suspiciousIpService;
            this.cardService = cardService;
            this.transactionProperty = transactionProperty;
        }

        public TransactionResponse processTransaction(TransactionRequest transactionRequest) {
            Transaction transaction = transactionRequestToTransaction(transactionRequest);
            Card card = cardService.findByNumber(transactionRequest.getNumber());
            int maxAllowed = transactionProperty.getInitialMaxAllowed();
            int maxManual = transactionProperty.getInitialMaxManual();

            if (card != null) {
                maxAllowed = card.getMaxAllowed();
                maxManual = card.getMaxManual();
            } else {
                saveCard(transactionRequest.getNumber(), maxAllowed, maxManual);
            }
            transactionRepository.save(transaction);



            TransactionResult amount = checkTransactionAmount(transactionRequest.getAmount(),maxAllowed,maxManual);
            TransactionResult stolenCard = checkForStolenCard(transactionRequest.getNumber()) ? PROHIBITED : ALLOWED;
            TransactionResult suspiciousIp = checkForSuspiciousIp(transactionRequest.getIp()) ? PROHIBITED : ALLOWED;

            List<TransactionResult> resultList = List.of(amount, stolenCard, suspiciousIp);
            TransactionResult transactionResult = getTransactionResult(resultList);

            transaction.setResult(transactionResult);
            transactionRepository.save(transaction);
            if (transactionResult == ALLOWED) return new TransactionResponse(ALLOWED, "none");
            if (transactionResult != PROHIBITED && amount == MANUAL_PROCESSING) {
                return new TransactionResponse(MANUAL_PROCESSING, "amount");
            }
            StringBuilder info = new StringBuilder()
                    .append(amount == transactionResult ? "amount, " : "")
                    .append(stolenCard == transactionResult ? "card-number, " : "")
                    .append(suspiciousIp == transactionResult ? "ip, " : "");
            info.setLength(info.length() - 2);
            return new TransactionResponse(transactionResult, info.toString());
        }

        private TransactionResult getTransactionResult(List<TransactionResult> list) {
            TransactionResult transactionResult = ALLOWED;
            for (var res : list) {
                if (res == MANUAL_PROCESSING) {
                    transactionResult = MANUAL_PROCESSING;
                }
                if (res == PROHIBITED) {
                    transactionResult = res;
                    break;
                }
            }
            return transactionResult;
        }

        private void saveCard(String cardNumber, int maxAllowed, int maxManual) {
            Card card = new Card();
            card.setNumber(cardNumber);
            card.setMaxAllowed(maxAllowed);
            card.setMaxManual(maxManual);
            cardService.save(card);
        }


        private TransactionResult checkTransactionAmount(long amount,int maxAllowed,int maxManual) {
            if (amount <= maxAllowed) return ALLOWED;
            return amount <= maxManual ? MANUAL_PROCESSING : PROHIBITED;
        }


        private boolean checkForStolenCard(String number) {
            return stolenCardService.existsByNumber(number);
        }

        private boolean checkForSuspiciousIp(String ip) {
            return suspiciousIpService.existsByIp(ip);
        }

        public Transaction transactionFeedback(TransactionFeedback transactionFeedback) {
            Transaction transaction = transactionRepository.findById(transactionFeedback.getTransactionId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));

            Card card = cardService.findByNumber(transaction.getNumber());
            int maxAllowed = card.getMaxAllowed();
            int maxManual = card.getMaxManual();

            if (transactionFeedback.getFeedback() == transaction.getResult()) {
                throw new ResponseStatusException(HttpStatus.UNPROCESSABLE_ENTITY);
            }
            if (!transaction.getFeedback().isEmpty()) {
                throw new ResponseStatusException(HttpStatus.CONFLICT);
            } else if (transactionFeedback.getFeedback() == ALLOWED) {
                maxAllowed = increaseMaxAllowed(transaction, maxAllowed);
                if (transaction.getResult() == PROHIBITED) {
                    maxManual = increaseMaxManual(transaction, maxManual);
                    cardService.updateMaxAllowedAndMaxManualByNumber(maxAllowed, maxManual, transaction.getNumber());
                } else {
                    cardService.updateMaxAllowedByNumber(maxAllowed, transaction.getNumber());
                }
                transaction.setFeedback(transactionFeedback.getFeedback());
            } else if (transactionFeedback.getFeedback() == MANUAL_PROCESSING) {
                if (transaction.getResult() == ALLOWED) {
                    maxAllowed = decreaseMaxAllowed(transaction, maxAllowed);
                    cardService.updateMaxAllowedByNumber(maxAllowed, transaction.getNumber());
                } else {
                    maxManual = increaseMaxManual(transaction, maxManual);
                    cardService.updateMaxManualByNumber(maxManual, transaction.getNumber());
                }
                transaction.setFeedback(transactionFeedback.getFeedback());
            } else if (transactionFeedback.getFeedback() == PROHIBITED) {
                maxManual = decreaseMaxManual(transaction, maxManual);
                if ((transaction.getResult() == MANUAL_PROCESSING)) {
                    cardService.updateMaxManualByNumber(maxManual, transaction.getNumber());
                } else {
                    maxAllowed = decreaseMaxAllowed(transaction, maxAllowed);
                    cardService.updateMaxAllowedAndMaxManualByNumber(maxAllowed, maxManual, transaction.getNumber());
                }
                transaction.setFeedback(transactionFeedback.getFeedback());
            }
            transactionRepository.save(transaction);
            return transaction;
        }

        private int decreaseMaxManual(Transaction transaction, int maxManual) {
            return (int) Math.ceil((transactionProperty.getCurrentLimitModifier() * maxManual)
                    - (transactionProperty.getValueFromTransactionModifier() * transaction.getAmount()));
        }

        private int decreaseMaxAllowed(Transaction transaction, int maxAllowed) {
            return (int) Math.ceil((transactionProperty.getCurrentLimitModifier() * maxAllowed)
                    - (transactionProperty.getValueFromTransactionModifier() * transaction.getAmount()));
        }

        private int increaseMaxAllowed(Transaction transaction, int maxAllowed) {
            return (int) Math.ceil((transactionProperty.getCurrentLimitModifier() * maxAllowed)
                    + (transactionProperty.getValueFromTransactionModifier() * transaction.getAmount()));
        }

        private int increaseMaxManual(Transaction transaction, int maxManual) {
            return (int) Math.ceil((transactionProperty.getCurrentLimitModifier() * maxManual)
                    + (transactionProperty.getValueFromTransactionModifier() * transaction.getAmount()));
        }

        public List<Transaction> listTransactions() {
            return transactionRepository.findAll();
        }

        public List<Transaction> getTransactionById(String number) {
            List<Transaction> list = transactionRepository.findAllByNumber(number);
            if (list.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, TRANSACTION_NOT_FOUND);
            } else {
                return list;
            }
        }
    }
  learner_created: false
- name: src/antifraud/service/impl/SuspiciousIpServiceImpl.java
  visible: true
  text: |
    package antifraud.service.impl;

    import antifraud.model.SuspiciousIp;
    import antifraud.model.dto.SuspiciousIpDTO;
    import antifraud.repository.SuspiciousIpRepository;
    import antifraud.service.SuspiciousIpService;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;
    import java.util.Optional;

    import static antifraud.mappers.ModelMapper.suspiciousIpDTOtoSuspiciousIp;

    @Service
    public class SuspiciousIpServiceImpl implements SuspiciousIpService {
        final SuspiciousIpRepository suspiciousIpRepository;

        public SuspiciousIpServiceImpl(SuspiciousIpRepository suspiciousIpRepository) {
            this.suspiciousIpRepository = suspiciousIpRepository;
        }

        @Transactional
        public Optional<SuspiciousIp> addSuspiciousIp(SuspiciousIpDTO ipDTO) {
            if (suspiciousIpRepository.existsByIp(ipDTO.getIp())) {
                return Optional.empty();
            }
            SuspiciousIp ip = suspiciousIpDTOtoSuspiciousIp(ipDTO);
            return Optional.of(suspiciousIpRepository.save(ip));
        }

        @Transactional
        public boolean deleteSuspiciousIp(String ip) {
            return suspiciousIpRepository.deleteByIp(ip) == 1;
        }

        public List<SuspiciousIp> listSuspiciousIp() {
            return suspiciousIpRepository.findAll();
        }

        @Override
        public boolean existsByIp(String ip) {
            return suspiciousIpRepository.existsByIp(ip);
        }
    }
  learner_created: false
- name: src/antifraud/service/CardService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.model.Card;

    public interface CardService {

        boolean existsByNumber(String cardNumber);

        Card findByNumber(String cardNumber);

        Card save(Card regularCard);

        void updateMaxAllowedAndMaxManualByNumber(int maxAllowed, int maxManual, String number);

        void updateMaxAllowedByNumber(int maxAllowed, String number);

        void updateMaxManualByNumber(int maxManual, String number);
    }
  learner_created: false
- name: src/antifraud/service/StolenCardService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.model.StolenCard;
    import antifraud.model.dto.StolenCardDTO;

    import java.util.List;
    import java.util.Optional;

    public interface StolenCardService {
        Optional<StolenCard> addStolenCard(StolenCardDTO stolenCardDTO);
        List<StolenCard> listStolenCards();
        boolean deleteStolenCard(String number);

        boolean existsByNumber(String number);
    }
  learner_created: false
- name: src/antifraud/service/SuspiciousIpService.java
  visible: true
  text: |-
    package antifraud.service;

    import antifraud.model.SuspiciousIp;
    import antifraud.model.dto.SuspiciousIpDTO;

    import java.util.List;
    import java.util.Optional;

    public interface SuspiciousIpService {

        Optional<SuspiciousIp> addSuspiciousIp(SuspiciousIpDTO ipDTO);

        boolean deleteSuspiciousIp(String ip);

        List<SuspiciousIp> listSuspiciousIp();

        boolean existsByIp(String ip);
    }
  learner_created: false
- name: src/antifraud/security/SecurityConfig.java
  visible: true
  text: |
    package antifraud.security;

    import lombok.AllArgsConstructor;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Lazy;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.SecurityFilterChain;

    @AllArgsConstructor
    @EnableWebSecurity
    @EnableMethodSecurity
    public class SecurityConfig {
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable().and() // for Postman, the H2 console
                    .authorizeRequests() // manage access
                    .mvcMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                    .mvcMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasRole("MERCHANT")
                    .mvcMatchers("/actuator/shutdown").permitAll() // needs to run test
                    // other matchers
                    .mvcMatchers("/api/**").authenticated()
                    //.anyRequest().denyAll()
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session

            http.cors();
            return http.build();

        }
        @Bean @Lazy
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: false
- name: src/antifraud/security/UserDetailsImpl.java
  visible: true
  text: |
    package antifraud.security;

    import antifraud.model.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {
        private final User user;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            this.user = user;
            this.rolesAndAuthorities = List.of(new SimpleGrantedAuthority("ROLE_" +user.getRole().toString()));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return user.getPassword();
        }

        @Override
        public String getUsername() {
            return user.getUsername();
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return user.isAccountNonLocked();
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: false
- name: src/antifraud/exception/ErrorHandler.java
  visible: true
  text: |
    package antifraud.exception;

    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.RestControllerAdvice;

    import javax.validation.ConstraintViolation;
    import javax.validation.ConstraintViolationException;

    @RestControllerAdvice
    public class ErrorHandler {
        @ExceptionHandler(ConstraintViolationException.class)
        ResponseEntity<String> handleInvalidCard(ConstraintViolationException ex) {
            String errorMessage = ex.getConstraintViolations().stream()
                    .map(ConstraintViolation::getMessage).findFirst().get();
            return ResponseEntity.badRequest().body(errorMessage);
        }
    }
  learner_created: false
- name: src/antifraud/exception/ExceptionMessages.java
  visible: true
  text: |
    package antifraud.exception;

    public class ExceptionMessages {
        public static final String PRESENT_ROLE = "This user role is already present!";
        public static final String FORBIDDEN_ROLE = "You can't set ADMINISTRATOR or ANONYMOUS role";
        public static final String INVALID_REQUEST ="Invalid request!";
        public static final String USER_NOT_FOUND = "User not found!";
        public static final String UNIQUE_USERNAME ="User with that username already exist!";
        public static final String TRANSACTION_NOT_FOUND = "Transaction not found!";
        private ExceptionMessages() {
        }
    }
  learner_created: false
- name: src/antifraud/controller/UserController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.model.response.delete.DeletedUser;
    import antifraud.model.dto.UserDTO;
    import antifraud.model.request.UserRoleRequest;
    import antifraud.model.request.UserStatusRequest;
    import antifraud.model.response.UserResponse;
    import antifraud.model.response.UserStatusChangeResponse;
    import antifraud.service.UserService;
    import lombok.AllArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.web.bind.annotation.CrossOrigin;
    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping("/api/auth")
    @AllArgsConstructor
    @CrossOrigin(origins = "http://localhost:3000/")
    public class UserController {
        UserService userService;

        @PostMapping("/user")
        ResponseEntity<UserResponse> registerUser(@Valid @RequestBody UserDTO userDTO){
            return new ResponseEntity<>(userService.registerUser(userDTO), HttpStatus.CREATED);
        }

        @PreAuthorize("hasRole('ADMINISTRATOR')")
        @DeleteMapping({"/user/{username}"})
        DeletedUser deleteUser(@PathVariable(required = false) String username){
            return userService.deleteUser(username);
        }


        @PreAuthorize("hasAnyRole('ADMINISTRATOR','SUPPORT')")
        @GetMapping("/list")
        List<UserResponse> listUsers() {
            return userService.listUsers();
        }

        @PreAuthorize("hasRole('ADMINISTRATOR')")
        @PutMapping("/role")
        UserResponse changeUserRole(@Valid @RequestBody UserRoleRequest userRoleRequest){
            return userService.updateUserRole(userRoleRequest);
        }

        @PreAuthorize("hasRole('ADMINISTRATOR')")
        @PutMapping("/access")
        UserStatusChangeResponse changeAccountStatus(@Valid @RequestBody UserStatusRequest userStatusRequest){
            return userService.changeUserStatus(userStatusRequest);
        }
    }
  learner_created: false
- name: src/antifraud/controller/StolenCardController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.model.StolenCard;
    import antifraud.model.response.delete.DeleteCard;
    import antifraud.model.dto.StolenCardDTO;
    import antifraud.service.StolenCardService;
    import lombok.AllArgsConstructor;
    import org.hibernate.validator.constraints.CreditCardNumber;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.List;

    @PreAuthorize("hasRole('SUPPORT')")
    @RestController
    @RequestMapping("/api/antifraud/stolencard")
    @AllArgsConstructor
    @Validated
    public class StolenCardController {
        StolenCardService stolenCardService;

        @PostMapping
        StolenCard addStolenCard(@Valid @RequestBody StolenCardDTO stolenCardDTO) {
            return stolenCardService.addStolenCard(stolenCardDTO)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.CONFLICT));
        }

        @GetMapping
        List<StolenCard> listStolenCards() {
            return stolenCardService.listStolenCards();
        }

        @DeleteMapping("/{number}")
        DeleteCard deleteStolenCard(@CreditCardNumber @PathVariable String number) {
            if (stolenCardService.deleteStolenCard(number)) {
                return new DeleteCard(number);
            } else {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND);
            }
        }
    }
  learner_created: false
- name: src/antifraud/controller/TransactionController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.model.Transaction;
    import antifraud.model.TransactionFeedback;
    import antifraud.model.request.TransactionRequest;
    import antifraud.model.response.TransactionResponse;
    import antifraud.service.TransactionService;
    import lombok.AllArgsConstructor;
    import org.hibernate.validator.constraints.CreditCardNumber;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;
    import java.util.List;

    @Validated
    @RestController
    @RequestMapping("/api/antifraud")
    @AllArgsConstructor
    public class TransactionController {
        TransactionService transactionService;

        @PreAuthorize("hasRole('MERCHANT')")
        @PostMapping("/transaction")
        TransactionResponse transaction(@Valid @RequestBody TransactionRequest transactionRequest) {
            return transactionService.processTransaction(transactionRequest);
        }

        @PreAuthorize("hasRole('SUPPORT')")
        @PutMapping("/transaction")
        Transaction transactionWithFeedback(@Valid @RequestBody TransactionFeedback transactionFeedback) {
            return transactionService.transactionFeedback(transactionFeedback);
        }

        @PreAuthorize("hasRole('SUPPORT')")
        @GetMapping("/history")
        List<Transaction> transactionHistory() {
            return transactionService.listTransactions();
        }

        @PreAuthorize("hasRole('SUPPORT')")
        @GetMapping("/history/{number}")
        List<Transaction> getTransactionByCardNumber(@CreditCardNumber @PathVariable("number") String number) {
            return transactionService.getTransactionById(number);
        }
    }
  learner_created: false
- name: src/antifraud/controller/SuspiciousIpController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.model.SuspiciousIp;
    import antifraud.model.response.delete.DeletedIp;
    import antifraud.model.dto.SuspiciousIpDTO;
    import antifraud.service.SuspiciousIpService;
    import antifraud.validation.IpAddress;
    import lombok.AllArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.List;

    @PreAuthorize("hasRole('SUPPORT')")
    @RestController
    @RequestMapping("/api/antifraud/suspicious-ip")
    @AllArgsConstructor
    @Validated
    public class SuspiciousIpController {
        SuspiciousIpService suspiciousIpService;

        @PostMapping
        SuspiciousIp addSuspiciousIp(@Valid @RequestBody SuspiciousIpDTO ip) {
            return suspiciousIpService.addSuspiciousIp(ip)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.CONFLICT));
        }
        @GetMapping
        List<SuspiciousIp> listSuspiciousIp(){
            return suspiciousIpService.listSuspiciousIp();
        }

        @DeleteMapping("/{ip}")
        DeletedIp deleteSuspiciousIp(@IpAddress @PathVariable String ip) {
            if (suspiciousIpService.deleteSuspiciousIp(ip)) {
                return new DeletedIp(ip);
            } else {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND);
            }
        }
    }
  learner_created: false
- name: src/antifraud/repository/CardRepository.java
  visible: true
  text: |-
    package antifraud.repository;

    import antifraud.model.Card;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Modifying;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.stereotype.Repository;
    import org.springframework.transaction.annotation.Transactional;

    @Repository
    public interface CardRepository extends JpaRepository<Card, Long> {
        boolean existsByNumber(String number);
        @Transactional
        @Modifying
        @Query("update Card c set c.maxAllowed = ?1, c.maxManual = ?2 where c.number = ?3")
        int updateMaxAllowedAndMaxManualByNumber(int max_ALLOWED, int max_MANUAL, String number);

        @Transactional
        @Modifying
        @Query("update Card c set c.maxManual = ?1 where c.number = ?2")
        int updateMaxManualByNumber(int max_MANUAL, String number);

        @Transactional
        @Modifying
        @Query("update Card c set c.maxAllowed = ?1 where c.number = ?2")
        int updateMaxAllowedByNumber(int max_ALLOWED, String number);

        Card findByNumber(String number);
    }
  learner_created: false
- name: src/antifraud/repository/UserRepository.java
  visible: true
  text: |-
    package antifraud.repository;

    import antifraud.model.User;
    import antifraud.model.enums.Roles;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Modifying;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.stereotype.Repository;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.Optional;

    @Repository
    @Transactional
    public interface UserRepository extends JpaRepository<User, Long> {
        boolean existsByUsername(String username);
        @Modifying
        @Query("update User u set u.role = ?1 where u.id = ?2")
        int updateRoleById(Roles role, Long id);

        @Modifying
        @Query("update User u set u.role = ?1 where u.username = ?2")
        int updateRoleByUsername(Roles role, String username);
        Optional<User> findByUsername(String username);

        long deleteUserByUsername( String username);
    }
  learner_created: false
- name: src/antifraud/repository/StolenCardRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.StolenCard;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface StolenCardRepository extends JpaRepository<StolenCard, Long> {
        boolean existsByNumber(String number);
        int deleteByNumber(String number);
    }
  learner_created: false
- name: src/antifraud/repository/TransactionRepository.java
  visible: true
  text: |-
    package antifraud.repository;

    import antifraud.model.Transaction;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDateTime;
    import java.util.List;

    @Repository
    public interface TransactionRepository extends JpaRepository<Transaction, Long> {
        List<Transaction> findAllByNumber(String number);
    }
  learner_created: false
- name: src/antifraud/repository/SuspiciousIpRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.SuspiciousIp;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface SuspiciousIpRepository extends JpaRepository<SuspiciousIp, Long> {
        long deleteByIp(String ip);
        boolean existsByIp(String ip);

    }
  learner_created: false
- name: src/antifraud/validation/IpAddress.java
  visible: true
  text: |
    package antifraud.validation;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.Documented;
    import java.lang.annotation.Retention;
    import java.lang.annotation.Target;

    import static java.lang.annotation.ElementType.FIELD;
    import static java.lang.annotation.ElementType.PARAMETER;
    import static java.lang.annotation.RetentionPolicy.RUNTIME;

    /**
     * Checks the annotated element if it's a valid IPv4 address.
     * Accepts String.
     */
    @Target({ FIELD, PARAMETER })
    @Retention(RUNTIME)
    @Constraint(validatedBy = IpAddressValidator.class)
    @Documented
    public @interface IpAddress {

        String message() default "Invalid Ip Address!";

        Class<?>[] groups() default { };

        Class<? extends Payload>[] payload() default { };

    }
  learner_created: false
- name: src/antifraud/validation/IpAddressValidator.java
  visible: true
  text: |-
    package antifraud.validation;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    /**
     * Validator for @IpAddress annotation
     */
    public class IpAddressValidator implements ConstraintValidator<IpAddress, String> {
        @Override
        public boolean isValid(String value, ConstraintValidatorContext context) {
            try {
                Pattern pattern =
                        Pattern.compile("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$");
                Matcher matcher = pattern.matcher(value);
                if (!matcher.matches()) {
                    return false;
                } else {
                    for (int i = 1; i <= 4; i++) {
                        int octet = Integer.parseInt(matcher.group(i));
                        if (octet > 255) {
                            return false;
                        }
                    }
                    return true;
                }
            } catch (Exception e) {
                return false;
            }
        }
    }
  learner_created: false
- name: src/antifraud/configuration/TransactionConfig.java
  visible: true
  text: |
    package antifraud.configuration;

    import org.springframework.boot.context.properties.EnableConfigurationProperties;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    @EnableConfigurationProperties(TransactionProperty.class)
    public class TransactionConfig {
    }
  learner_created: false
- name: src/antifraud/configuration/TransactionProperty.java
  visible: true
  text: |
    package antifraud.configuration;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.Setter;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.boot.context.properties.ConfigurationProperties;
    import org.springframework.boot.context.properties.ConstructorBinding;
    import org.springframework.validation.annotation.Validated;

    import javax.validation.constraints.Positive;

    @Slf4j
    @ConfigurationProperties(prefix = "transaction.values")
    @Getter
    @Setter
    @AllArgsConstructor
    @ConstructorBinding
    @Validated
    public class TransactionProperty {
        @Positive
        private int initialMaxAllowed;
        @Positive
        private int initialMaxManual;
        @Positive
        private double currentLimitModifier;
        @Positive
        private double valueFromTransactionModifier;

    }
  learner_created: false
- name: src/resources/swagger.json
  visible: true
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");


            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 50

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 51

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 52

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 53

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 55

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 56

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 57

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 58

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 59

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 60

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 61

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 62

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 63

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 64

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 65

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 66

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 67

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 68


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 69

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 70

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 71

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 72

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 73

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 74

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 75

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 76

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 77

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 78

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 80

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 81

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 82

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 83

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 84

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 85

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 86

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 87

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 88

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 89

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 91

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 92

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 93

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 94

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 97

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 99 Thnx to E. Kovko

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 100

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 102
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 103

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 104


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 105

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 106

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 107

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 109

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 110

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 112

                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 113

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 114

        };
    }
  learner_created: false
- name: src/antifraud/model/enums/Region.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18071#comment
status: Solved
record: 4
